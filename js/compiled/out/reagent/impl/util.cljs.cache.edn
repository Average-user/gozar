{:rename-macros {}, :renames {}, :externs {React {}, require {}, Error {}, window {}}, :use-macros {log reagent.debug, dbg reagent.debug, $! reagent.interop, warn reagent.debug, $ reagent.interop}, :excludes #{}, :name reagent.impl.util, :imports nil, :requires {cljsjs.react cljsjs.react, reagent.debug reagent.debug, reagent.interop reagent.interop, string clojure.string, clojure.string clojure.string}, :uses nil, :defs {merge-props {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/reagent/impl/util.cljs", :line 88, :column 7, :end-line 88, :end-column 18, :arglists (quote ([p1 p2]))}, :name reagent.impl.util/merge-props, :variadic false, :file "resources/public/js/compiled/out/reagent/impl/util.cljs", :end-column 18, :method-params ([p1 p2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 88, :end-line 88, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p1 p2]))}, capitalize {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/reagent/impl/util.cljs", :line 34, :column 7, :end-line 34, :end-column 17, :arglists (quote ([s]))}, :name reagent.impl.util/capitalize, :variadic false, :file "resources/public/js/compiled/out/reagent/impl/util.cljs", :end-column 17, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, react {:name reagent.impl.util/react, :file "resources/public/js/compiled/out/reagent/impl/util.cljs", :line 7, :column 1, :end-line 7, :end-column 15, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/reagent/impl/util.cljs", :line 7, :column 10, :end-line 7, :end-column 15}, :tag js}, dash-to-camel {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/reagent/impl/util.cljs", :line 39, :column 7, :end-line 39, :end-column 20, :arglists (quote ([dashed]))}, :name reagent.impl.util/dash-to-camel, :variadic false, :file "resources/public/js/compiled/out/reagent/impl/util.cljs", :end-column 20, :method-params ([dashed]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 39, :max-fixed-arity 1, :fn-var true, :arglists (quote ([dashed]))}, dont-camel-case {:name reagent.impl.util/dont-camel-case, :file "resources/public/js/compiled/out/reagent/impl/util.cljs", :line 32, :column 1, :end-line 32, :end-column 21, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/reagent/impl/util.cljs", :line 32, :column 6, :end-line 32, :end-column 21}, :tag cljs.core/ISet}, merge-style {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/reagent/impl/util.cljs", :line 80, :column 8, :end-line 80, :end-column 19, :private true, :arglists (quote ([p1 p2]))}, :private true, :name reagent.impl.util/merge-style, :variadic false, :file "resources/public/js/compiled/out/reagent/impl/util.cljs", :end-column 19, :method-params ([p1 p2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 80, :end-line 80, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p1 p2]))}, memoize-1 {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/reagent/impl/util.cljs", :line 22, :column 7, :end-line 22, :end-column 16, :arglists (quote ([f]))}, :name reagent.impl.util/memoize-1, :variadic false, :file "resources/public/js/compiled/out/reagent/impl/util.cljs", :end-column 16, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f]))}, ->partial-ifn {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/reagent/impl/util.cljs", :line 61, :column 10, :end-line 61, :end-column 21, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn}, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn}, :factory :positional, :arglists (quote ([f args p]))}, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn}, :name reagent.impl.util/->partial-ifn, :variadic false, :file "resources/public/js/compiled/out/reagent/impl/util.cljs", :end-column 21, :method-params ([f args p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 61, :end-line 61, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f args p])), :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn}}, *non-reactive* {:name reagent.impl.util/*non-reactive*, :file "resources/public/js/compiled/out/reagent/impl/util.cljs", :line 16, :column 1, :end-line 16, :end-column 39, :tag boolean, :dynamic true, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/reagent/impl/util.cljs", :line 16, :column 25, :end-line 16, :end-column 39, :tag boolean, :dynamic true}}, fun-name {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/reagent/impl/util.cljs", :line 48, :column 7, :end-line 48, :end-column 15, :arglists (quote ([f]))}, :name reagent.impl.util/fun-name, :variadic false, :file "resources/public/js/compiled/out/reagent/impl/util.cljs", :end-column 15, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f]))}, partial-ifn {:num-fields 3, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn}, :name reagent.impl.util/partial-ifn, :file "resources/public/js/compiled/out/reagent/impl/util.cljs", :end-column 21, :type true, :column 10, :line 61, :record false, :end-line 61, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn}}, merge-class {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/reagent/impl/util.cljs", :line 72, :column 8, :end-line 72, :end-column 19, :private true, :arglists (quote ([p1 p2]))}, :private true, :name reagent.impl.util/merge-class, :variadic false, :file "resources/public/js/compiled/out/reagent/impl/util.cljs", :end-column 19, :method-params ([p1 p2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 72, :end-line 72, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p1 p2]))}, is-client {:name reagent.impl.util/is-client, :file "resources/public/js/compiled/out/reagent/impl/util.cljs", :line 13, :column 1, :end-line 13, :end-column 15, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/reagent/impl/util.cljs", :line 13, :column 6, :end-line 13, :end-column 15}, :tag boolean}, force-update {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/reagent/impl/util.cljs", :line 98, :column 7, :end-line 98, :end-column 19, :arglists (quote ([comp deep]))}, :name reagent.impl.util/force-update, :variadic false, :file "resources/public/js/compiled/out/reagent/impl/util.cljs", :end-column 19, :method-params ([comp deep]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 98, :end-line 98, :max-fixed-arity 2, :fn-var true, :arglists (quote ([comp deep]))}, *always-update* {:name reagent.impl.util/*always-update*, :file "resources/public/js/compiled/out/reagent/impl/util.cljs", :line 96, :column 1, :end-line 96, :end-column 31, :dynamic true, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/reagent/impl/util.cljs", :line 96, :column 16, :end-line 96, :end-column 31, :dynamic true}, :tag boolean}}, :require-macros {reagent.debug reagent.debug, reagent.interop reagent.interop}, :cljs.analyzer/constants {:seen #{p :else args :name :style :class :mutable f}, :order [:else :name f args p :mutable :class :style]}, :doc nil}