{:rename-macros {}, :renames {}, :externs {Error {}, goog {string {StringBuffer {prototype {append {}}}}}}, :use-macros {}, :excludes #{cat * or merge keys + and def}, :name cljs.spec.alpha, :imports nil, :requires {cljs.core cljs.core, gobj goog.object, goog.object goog.object, walk clojure.walk, gen cljs.spec.gen.alpha, c cljs.core, str clojure.string, clojure.string clojure.string, clojure.walk clojure.walk, cljs.spec.gen.alpha cljs.spec.gen.alpha}, :uses nil, :defs {t_cljs$spec$alpha11209 {:num-fields 3, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta}, :name cljs.spec.alpha/t_cljs$spec$alpha11209, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :type true, :anonymous true, :column 3, :line 1236, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, form {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 162, :column 7, :end-line 162, :end-column 11, :arglists (quote ([spec])), :doc "returns the spec as data"}, :name cljs.spec.alpha/form, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 11, :method-params ([spec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 162, :end-line 162, :max-fixed-arity 1, :fn-var true, :arglists (quote ([spec])), :doc "returns the spec as data"}, nilable-impl {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 1349, :column 19, :end-line 1349, :end-column 31, :skip-wiki true, :arglists (quote ([form pred gfn])), :doc "Do not call this directly, use 'nilable'"}, :name cljs.spec.alpha/nilable-impl, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 31, :method-params ([form pred gfn]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 1349, :end-line 1349, :max-fixed-arity 3, :fn-var true, :arglists (quote ([form pred gfn])), :doc "Do not call this directly, use 'nilable'"}, *recursion-limit* {:meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 21, :column 16, :end-line 21, :end-column 33, :dynamic true}, :name cljs.spec.alpha/*recursion-limit*, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 33, :column 1, :dynamic true, :line 21, :end-line 21, :tag number, :doc "A soft limit on how many times a branching spec (or/alt/*/opt-keys/multi-spec)\n  can be recursed through during generation. After this a\n  non-recursive branch will be chosen."}, *coll-error-limit* {:meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 35, :column 16, :end-line 35, :end-column 34, :dynamic true}, :name cljs.spec.alpha/*coll-error-limit*, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 34, :column 1, :dynamic true, :line 35, :end-line 35, :tag number, :doc "The number of errors reported by explain in a collection spec'ed with 'every'"}, ->t_cljs$spec$alpha11222 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta cljs.core/ILookup}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/ILookup}, :factory :positional, :arglists (quote ([argspec aform retspec rform fnspec fform gfn specs meta11223])), :file nil}, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta cljs.core/ILookup}, :name cljs.spec.alpha/->t_cljs$spec$alpha11222, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :method-params ([argspec aform retspec rform fnspec fform gfn specs meta11223]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 1285, :max-fixed-arity 9, :fn-var true, :arglists (quote ([argspec aform retspec rform fnspec fform gfn specs meta11223])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/ILookup}}, explain-printer {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 214, :column 7, :end-line 214, :end-column 22, :arglists (quote ([ed])), :doc "Default printer for explain-data. nil indicates a successful validation."}, :name cljs.spec.alpha/explain-printer, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 22, :method-params ([ed]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 214, :end-line 214, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ed])), :doc "Default printer for explain-data. nil indicates a successful validation."}, op-explain {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 1101, :column 8, :end-line 1101, :end-column 18, :private true, :arglists (quote ([form p path via in input]))}, :private true, :name cljs.spec.alpha/op-explain, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 18, :method-params ([form p path via in input]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1101, :end-line 1101, :max-fixed-arity 6, :fn-var true, :arglists (quote ([form p path via in input]))}, Specize {:meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 123, :column 14, :end-line 123, :end-column 21, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {specize* [[_] [_ form]]}}}, :protocol-symbol true, :name cljs.spec.alpha/Specize, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 21, :column 1, :line 123, :protocol-info {:methods {specize* [[_] [_ form]]}}, :info nil, :end-line 123, :tag any, :impls #{cljs.spec.alpha/t_cljs$spec$alpha10760 cljs.spec.alpha/t_cljs$spec$alpha10710 cljs.spec.alpha/t_cljs$spec$alpha10913 cljs.spec.alpha/t_cljs$spec$alpha10815 cljs.spec.alpha/t_cljs$spec$alpha10793 cljs.core/Keyword cljs.spec.alpha/t_cljs$spec$alpha10931 cljs.spec.alpha/t_cljs$spec$alpha10671 cljs.spec.alpha/t_cljs$spec$alpha11245 cljs.spec.alpha/t_cljs$spec$alpha10775 default cljs.spec.alpha/t_cljs$spec$alpha11248 cljs.spec.alpha/t_cljs$spec$alpha11222 cljs.spec.alpha/t_cljs$spec$alpha11228 cljs.spec.alpha/t_cljs$spec$alpha11251 cljs.spec.alpha/t_cljs$spec$alpha11254 cljs.spec.alpha/t_cljs$spec$alpha10934 cljs.spec.alpha/t_cljs$spec$alpha11209 cljs.spec.alpha/t_cljs$spec$alpha10807 cljs.core/Symbol cljs.spec.alpha/t_cljs$spec$alpha10947 cljs.spec.alpha/t_cljs$spec$alpha10917 cljs.spec.alpha/t_cljs$spec$alpha11212}, :doc nil, :jsdoc ("@interface")}, ->t_cljs$spec$alpha10793 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([forms preds gfn specs cnt meta10794])), :file nil}, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta}, :name cljs.spec.alpha/->t_cljs$spec$alpha10793, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :method-params ([forms preds gfn specs cnt meta10794]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 6, :factory :positional, :line 548, :max-fixed-arity 6, :fn-var true, :arglists (quote ([forms preds gfn specs cnt meta10794])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t_cljs$spec$alpha10671 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([keys->specnames opt req-un opt-un p__10668 gfn pred-exprs keys-pred argm opt-keys req-specs map__10669 req id req-keys opt-specs k->s pred-forms meta10672])), :file nil}, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta}, :name cljs.spec.alpha/->t_cljs$spec$alpha10671, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :method-params ([keys->specnames opt req-un opt-un p__10668 gfn pred-exprs keys-pred argm opt-keys req-specs map__10669 req id req-keys opt-specs k->s pred-forms meta10672]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 383, :max-fixed-arity 19, :fn-var true, :arglists (quote ([keys->specnames opt req-un opt-un p__10668 gfn pred-exprs keys-pred argm opt-keys req-specs map__10669 req id req-keys opt-specs k->s pred-forms meta10672])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, alt-impl {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 985, :column 19, :end-line 985, :end-column 27, :skip-wiki true, :arglists (quote ([ks ps forms])), :doc "Do not call this directly, use 'alt'"}, :name cljs.spec.alpha/alt-impl, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 27, :method-params ([ks ps forms]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 985, :end-line 985, :max-fixed-arity 3, :fn-var true, :arglists (quote ([ks ps forms])), :doc "Do not call this directly, use 'alt'"}, tagged-ret {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 604, :column 8, :end-line 604, :end-column 18, :private true, :arglists (quote ([v]))}, :private true, :name cljs.spec.alpha/tagged-ret, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 18, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 604, :end-line 604, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v]))}, pvalid? {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 362, :column 8, :end-line 362, :end-column 15, :private true, :arglists (quote ([pred x] [pred x form])), :doc "internal helper function that returns true when x is valid for spec.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([pred x] [pred x form]), :arglists ([pred x] [pred x form]), :arglists-meta (nil nil)}}, :private true, :name cljs.spec.alpha/pvalid?, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([pred x] [pred x form]), :arglists ([pred x] [pred x form]), :arglists-meta (nil nil)}, :method-params ([pred x] [pred x form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 362, :end-line 362, :max-fixed-arity 3, :fn-var true, :arglists ([pred x] [pred x form]), :doc "internal helper function that returns true when x is valid for spec."}, def-impl {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 290, :column 19, :end-line 290, :end-column 27, :skip-wiki true, :arglists (quote ([k form spec])), :doc "Do not call this directly, use 'def'"}, :name cljs.spec.alpha/def-impl, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 27, :method-params ([k form spec]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 290, :end-line 290, :max-fixed-arity 3, :fn-var true, :arglists (quote ([k form spec])), :doc "Do not call this directly, use 'def'"}, *explain-out* {:name cljs.spec.alpha/*explain-out*, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 246, :column 1, :end-line 246, :end-column 29, :dynamic true, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 246, :column 16, :end-line 246, :end-column 29, :dynamic true}}, t_cljs$spec$alpha10931 {:num-fields 4, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta}, :name cljs.spec.alpha/t_cljs$spec$alpha10931, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :type true, :anonymous true, :column 3, :line 767, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t_cljs$spec$alpha10793 {:num-fields 6, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta}, :name cljs.spec.alpha/t_cljs$spec$alpha10793, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :type true, :anonymous true, :column 6, :line 548, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, *runtime-asserts* {:meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 1420, :column 3, :end-line 1420, :end-column 20, :private true, :dynamic true}, :private true, :name cljs.spec.alpha/*runtime-asserts*, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 20, :column 1, :dynamic true, :line 1418, :end-line 1420, :tag boolean}, regex-spec-impl {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 1233, :column 19, :end-line 1233, :end-column 34, :skip-wiki true, :arglists (quote ([re gfn])), :doc "Do not call this directly, use 'spec' with a regex op argument"}, :name cljs.spec.alpha/regex-spec-impl, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 34, :method-params ([re gfn]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 1233, :end-line 1233, :max-fixed-arity 2, :fn-var true, :arglists (quote ([re gfn])), :doc "Do not call this directly, use 'spec' with a regex op argument"}, merge-spec-impl {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 764, :column 19, :end-line 764, :end-column 34, :skip-wiki true, :arglists (quote ([forms preds gfn])), :doc "Do not call this directly, use 'merge'"}, :name cljs.spec.alpha/merge-spec-impl, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 34, :method-params ([forms preds gfn]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 764, :end-line 764, :max-fixed-arity 3, :fn-var true, :arglists (quote ([forms preds gfn])), :doc "Do not call this directly, use 'merge'"}, explain-data* {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 200, :column 7, :end-line 200, :end-column 20, :arglists (quote ([spec path via in x]))}, :name cljs.spec.alpha/explain-data*, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 20, :method-params ([spec path via in x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 200, :end-line 200, :max-fixed-arity 5, :fn-var true, :arglists (quote ([spec path via in x]))}, add-ret {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 1052, :column 8, :end-line 1052, :end-column 15, :private true, :arglists (quote ([p r k]))}, :private true, :name cljs.spec.alpha/add-ret, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 15, :method-params ([p r k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1052, :end-line 1052, :max-fixed-arity 3, :fn-var true, :arglists (quote ([p r k]))}, explain-pred-list {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 689, :column 8, :end-line 689, :end-column 25, :private true, :arglists (quote ([forms preds path via in x]))}, :private true, :name cljs.spec.alpha/explain-pred-list, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 25, :method-params ([forms preds path via in x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 689, :end-line 689, :max-fixed-arity 6, :fn-var true, :arglists (quote ([forms preds path via in x]))}, MAX_INT {:name cljs.spec.alpha/MAX_INT, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 19, :column 1, :end-line 19, :end-column 21, :const true, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 19, :column 14, :end-line 19, :end-column 21, :const true}, :tag number}, check-asserts {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 1428, :column 7, :end-line 1428, :end-column 20, :arglists (quote ([flag])), :doc "Enable or disable spec asserts that have been compiled\nwith '*compile-asserts*' true.  See 'assert'.\nInitially set to boolean value of cljs.spec.alpha/*runtime-asserts*.\nDefaults to false."}, :name cljs.spec.alpha/check-asserts, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 20, :method-params ([flag]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1428, :end-line 1428, :max-fixed-arity 1, :fn-var true, :arglists (quote ([flag])), :doc "Enable or disable spec asserts that have been compiled\nwith '*compile-asserts*' true.  See 'assert'.\nInitially set to boolean value of cljs.spec.alpha/*runtime-asserts*.\nDefaults to false."}, alt2 {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 983, :column 8, :end-line 983, :end-column 12, :private true, :arglists (quote ([p1 p2]))}, :private true, :name cljs.spec.alpha/alt2, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 12, :method-params ([p1 p2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 983, :end-line 983, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p1 p2]))}, assert* {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 1436, :column 7, :end-line 1436, :end-column 14, :arglists (quote ([spec x])), :doc "Do not call this directly, use 'assert'."}, :name cljs.spec.alpha/assert*, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 14, :method-params ([spec x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1436, :end-line 1436, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec x])), :doc "Do not call this directly, use 'assert'."}, inst-in-range? {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 1384, :column 7, :end-line 1384, :end-column 21, :arglists (quote ([start end inst])), :doc "Return true if inst at or after start and before end"}, :name cljs.spec.alpha/inst-in-range?, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 21, :method-params ([start end inst]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1384, :end-line 1384, :max-fixed-arity 3, :fn-var true, :arglists (quote ([start end inst])), :doc "Return true if inst at or after start and before end"}, registry-ref {:name cljs.spec.alpha/registry-ref, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 47, :column 1, :end-line 47, :end-column 32, :private true, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 47, :column 20, :end-line 47, :end-column 32, :private true}, :tag any}, t_cljs$spec$alpha10671 {:num-fields 19, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta}, :name cljs.spec.alpha/t_cljs$spec$alpha10671, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :type true, :anonymous true, :column 5, :line 383, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, accept? {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 920, :column 8, :end-line 920, :end-column 15, :private true, :arglists (quote ([{:keys [:cljs.spec.alpha/op]}]))}, :private true, :name cljs.spec.alpha/accept?, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 15, :method-params ([p__10983]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 920, :end-line 920, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [:cljs.spec.alpha/op]}]))}, t_cljs$spec$alpha11212 {:num-fields 3, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta}, :name cljs.spec.alpha/t_cljs$spec$alpha11212, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :type true, :anonymous true, :column 3, :line 1236, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, and-spec-impl {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 700, :column 19, :end-line 700, :end-column 32, :skip-wiki true, :arglists (quote ([forms preds gfn])), :doc "Do not call this directly, use 'and'"}, :name cljs.spec.alpha/and-spec-impl, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 32, :method-params ([forms preds gfn]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 700, :end-line 700, :max-fixed-arity 3, :fn-var true, :arglists (quote ([forms preds gfn])), :doc "Do not call this directly, use 'and'"}, accept {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 918, :column 8, :end-line 918, :end-column 14, :private true, :arglists (quote ([x]))}, :private true, :name cljs.spec.alpha/accept, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 14, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 918, :end-line 918, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, recur-limit? {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 333, :column 8, :end-line 333, :end-column 20, :private true, :arglists (quote ([rmap id path k]))}, :private true, :name cljs.spec.alpha/recur-limit?, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 20, :method-params ([rmap id path k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 333, :end-line 333, :max-fixed-arity 4, :fn-var true, :arglists (quote ([rmap id path k]))}, ->t_cljs$spec$alpha11251 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([form pred gfn spec meta11252])), :file nil}, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta}, :name cljs.spec.alpha/->t_cljs$spec$alpha11251, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :method-params ([form pred gfn spec meta11252]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 1353, :max-fixed-arity 5, :fn-var true, :arglists (quote ([form pred gfn spec meta11252])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t_cljs$spec$alpha11245 {:num-fields 2, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta}, :name cljs.spec.alpha/t_cljs$spec$alpha11245, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :type true, :anonymous true, :column 5, :line 1333, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, describe* {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 45, :column 4, :end-line 45, :end-column 13, :protocol cljs.spec.alpha/Spec, :doc nil, :arglists (quote ([spec]))}, :protocol cljs.spec.alpha/Spec, :name cljs.spec.alpha/describe*, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 13, :method-params ([spec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 45, :max-fixed-arity 1, :fn-var true, :arglists (quote ([spec])), :doc nil}, map-spec-impl {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 376, :column 19, :end-line 376, :end-column 32, :skip-wiki true, :arglists (quote ([{:keys [req-un opt-un keys-pred pred-exprs opt-keys req-specs req req-keys opt-specs pred-forms opt gfn], :as argm}])), :doc "Do not call this directly, use 'spec' with a map argument"}, :name cljs.spec.alpha/map-spec-impl, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 32, :method-params ([p__10668]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 376, :end-line 376, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [req-un opt-un keys-pred pred-exprs opt-keys req-specs req req-keys opt-specs pred-forms opt gfn], :as argm}])), :doc "Do not call this directly, use 'spec' with a map argument"}, ->t_cljs$spec$alpha10710 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([keys->specnames opt req-un opt-un map__10708 p__10668 gfn pred-exprs keys-pred argm opt-keys req-specs req id req-keys opt-specs k->s pred-forms meta10711])), :file nil}, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta}, :name cljs.spec.alpha/->t_cljs$spec$alpha10710, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :method-params ([keys->specnames opt req-un opt-un map__10708 p__10668 gfn pred-exprs keys-pred argm opt-keys req-specs req id req-keys opt-specs k->s pred-forms meta10711]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 383, :max-fixed-arity 19, :fn-var true, :arglists (quote ([keys->specnames opt req-un opt-un map__10708 p__10668 gfn pred-exprs keys-pred argm opt-keys req-specs req id req-keys opt-specs k->s pred-forms meta10711])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, reg-resolve! {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 66, :column 8, :end-line 66, :end-column 20, :private true, :arglists (quote ([k])), :doc "returns the spec/regex at end of alias chain starting with k, throws if not found, k if k not ident"}, :private true, :name cljs.spec.alpha/reg-resolve!, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 20, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k])), :doc "returns the spec/regex at end of alias chain starting with k, throws if not found, k if k not ident"}, t_cljs$spec$alpha10760 {:num-fields 6, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta}, :name cljs.spec.alpha/t_cljs$spec$alpha10760, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :type true, :anonymous true, :column 6, :line 468, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, re-explain {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 1207, :column 8, :end-line 1207, :end-column 18, :private true, :arglists (quote ([path via in re input]))}, :private true, :name cljs.spec.alpha/re-explain, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 18, :method-params ([path via in re input]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1207, :end-line 1207, :max-fixed-arity 5, :fn-var true, :arglists (quote ([path via in re input]))}, alts {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 982, :column 8, :end-line 982, :end-column 12, :private true, :arglists (quote ([& ps])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(ps)], :arglists ([& ps]), :arglists-meta (nil)}}, :private true, :name cljs.spec.alpha/alts, :variadic true, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(ps)], :arglists ([& ps]), :arglists-meta (nil)}, :method-params [(ps)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 982, :end-line 982, :max-fixed-arity 0, :fn-var true, :arglists ([& ps])}, ->t_cljs$spec$alpha10947 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([form max-count p__10944 check? gfn gen-max pred cpred map__10945 conform-keys kind-form addcv cfns describe-form distinct spec kfn gen-into count min-count opts kind conform-all conform-into meta10948])), :file nil}, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta}, :name cljs.spec.alpha/->t_cljs$spec$alpha10947, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :method-params ([form max-count p__10944 check? gfn gen-max pred cpred map__10945 conform-keys kind-form addcv cfns describe-form distinct spec kfn gen-into count min-count opts kind conform-all conform-into meta10948]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 6, :factory :positional, :line 830, :max-fixed-arity 25, :fn-var true, :arglists (quote ([form max-count p__10944 check? gfn gen-max pred cpred map__10945 conform-keys kind-form addcv cfns describe-form distinct spec kfn gen-into count min-count opts kind conform-all conform-into meta10948])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, with-name {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 85, :column 8, :end-line 85, :end-column 17, :private true, :arglists (quote ([spec name]))}, :private true, :name cljs.spec.alpha/with-name, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 17, :method-params ([spec name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 85, :end-line 85, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec name]))}, ->t_cljs$spec$alpha10931 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([forms preds gfn meta10932])), :file nil}, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta}, :name cljs.spec.alpha/->t_cljs$spec$alpha10931, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :method-params ([forms preds gfn meta10932]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 767, :max-fixed-arity 4, :fn-var true, :arglists (quote ([forms preds gfn meta10932])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, explain {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 254, :column 7, :end-line 254, :end-column 14, :arglists (quote ([spec x])), :doc "Given a spec and a value that fails to conform, prints an explanation to *out*."}, :name cljs.spec.alpha/explain, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 14, :method-params ([spec x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 254, :end-line 254, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec x])), :doc "Given a spec and a value that fails to conform, prints an explanation to *out*."}, spec-name {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 93, :column 8, :end-line 93, :end-column 17, :private true, :arglists (quote ([spec]))}, :private true, :name cljs.spec.alpha/spec-name, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 17, :method-params ([spec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 93, :end-line 93, :max-fixed-arity 1, :fn-var true, :arglists (quote ([spec]))}, map-spec {:name cljs.spec.alpha/map-spec, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 317, :column 1, :end-line 317, :end-column 18, :declared true, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 317, :column 10, :end-line 317, :end-column 18, :declared true}}, t_cljs$spec$alpha11248 {:num-fields 2, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta}, :name cljs.spec.alpha/t_cljs$spec$alpha11248, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :type true, :anonymous true, :column 5, :line 1333, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, with-gen* {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 44, :column 4, :end-line 44, :end-column 13, :protocol cljs.spec.alpha/Spec, :doc nil, :arglists (quote ([spec gfn]))}, :protocol cljs.spec.alpha/Spec, :name cljs.spec.alpha/with-gen*, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 13, :method-params ([spec gfn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 44, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec gfn])), :doc nil}, ->t_cljs$spec$alpha11228 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta cljs.core/ILookup}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/ILookup}, :factory :positional, :arglists (quote ([argspec aform retspec rform fnspec fform gfn specs meta11229])), :file nil}, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta cljs.core/ILookup}, :name cljs.spec.alpha/->t_cljs$spec$alpha11228, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :method-params ([argspec aform retspec rform fnspec fform gfn specs meta11229]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 1285, :max-fixed-arity 9, :fn-var true, :arglists (quote ([argspec aform retspec rform fnspec fform gfn specs meta11229])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/ILookup}}, ->t_cljs$spec$alpha11245 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([spec meta11246])), :file nil}, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta}, :name cljs.spec.alpha/->t_cljs$spec$alpha11245, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :method-params ([spec meta11246]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 1333, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec meta11246])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, or-spec-impl {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 610, :column 19, :end-line 610, :end-column 31, :skip-wiki true, :arglists (quote ([keys forms preds gfn])), :doc "Do not call this directly, use 'or'"}, :name cljs.spec.alpha/or-spec-impl, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 31, :method-params ([keys forms preds gfn]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 610, :end-line 610, :max-fixed-arity 4, :fn-var true, :arglists (quote ([keys forms preds gfn])), :doc "Do not call this directly, use 'or'"}, specize {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 140, :column 8, :end-line 140, :end-column 15, :private true, :arglists (quote ([s] [s form])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [s form]), :arglists ([s] [s form]), :arglists-meta (nil nil)}}, :private true, :name cljs.spec.alpha/specize, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [s form]), :arglists ([s] [s form]), :arglists-meta (nil nil)}, :method-params ([s] [s form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 140, :end-line 140, :max-fixed-arity 2, :fn-var true, :arglists ([s] [s form])}, ->t_cljs$spec$alpha11212 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([re gfn meta11213])), :file nil}, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta}, :name cljs.spec.alpha/->t_cljs$spec$alpha11212, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :method-params ([re gfn meta11213]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 1236, :max-fixed-arity 3, :fn-var true, :arglists (quote ([re gfn meta11213])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, *fspec-iterations* {:meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 27, :column 16, :end-line 27, :end-column 34, :dynamic true}, :name cljs.spec.alpha/*fspec-iterations*, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 34, :column 1, :dynamic true, :line 27, :end-line 27, :tag number, :doc "The number of times an anonymous fn specified by fspec will be (generatively) tested during conform"}, Spec {:meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 39, :column 14, :end-line 39, :end-column 18, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {conform* [[spec x]], unform* [[spec y]], explain* [[spec path via in x]], gen* [[spec overrides path rmap]], with-gen* [[spec gfn]], describe* [[spec]]}}}, :protocol-symbol true, :name cljs.spec.alpha/Spec, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 18, :column 1, :line 39, :protocol-info {:methods {conform* [[spec x]], unform* [[spec y]], explain* [[spec path via in x]], gen* [[spec overrides path rmap]], with-gen* [[spec gfn]], describe* [[spec]]}}, :info nil, :end-line 39, :tag any, :impls #{cljs.spec.alpha/t_cljs$spec$alpha10760 cljs.spec.alpha/t_cljs$spec$alpha10710 cljs.spec.alpha/t_cljs$spec$alpha10913 cljs.spec.alpha/t_cljs$spec$alpha10815 cljs.spec.alpha/t_cljs$spec$alpha10793 cljs.spec.alpha/t_cljs$spec$alpha10931 cljs.spec.alpha/t_cljs$spec$alpha10671 cljs.spec.alpha/t_cljs$spec$alpha11245 cljs.spec.alpha/t_cljs$spec$alpha10775 cljs.spec.alpha/t_cljs$spec$alpha11248 cljs.spec.alpha/t_cljs$spec$alpha11222 cljs.spec.alpha/t_cljs$spec$alpha11228 cljs.spec.alpha/t_cljs$spec$alpha11251 cljs.spec.alpha/t_cljs$spec$alpha11254 cljs.spec.alpha/t_cljs$spec$alpha10934 cljs.spec.alpha/t_cljs$spec$alpha11209 cljs.spec.alpha/t_cljs$spec$alpha10807 cljs.spec.alpha/t_cljs$spec$alpha10947 cljs.spec.alpha/t_cljs$spec$alpha10917 cljs.spec.alpha/t_cljs$spec$alpha11212}, :doc nil, :jsdoc ("@interface")}, unform {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 155, :column 7, :end-line 155, :end-column 13, :arglists (quote ([spec x])), :doc "Given a spec and a value created by or compliant with a call to\n  'conform' with the same spec, returns a value with all conform\n   destructuring undone."}, :name cljs.spec.alpha/unform, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 13, :method-params ([spec x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 155, :end-line 155, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec x])), :doc "Given a spec and a value created by or compliant with a call to\n  'conform' with the same spec, returns a value with all conform\n   destructuring undone."}, valid? {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 353, :column 7, :end-line 353, :end-column 13, :arglists (quote ([spec x] [spec x form])), :doc "Helper function that returns true when x is valid for spec.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([spec x] [spec x form]), :arglists ([spec x] [spec x form]), :arglists-meta (nil nil)}}, :name cljs.spec.alpha/valid?, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([spec x] [spec x form]), :arglists ([spec x] [spec x form]), :arglists-meta (nil nil)}, :method-params ([spec x] [spec x form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 353, :end-line 353, :max-fixed-arity 3, :fn-var true, :arglists ([spec x] [spec x form]), :doc "Helper function that returns true when x is valid for spec."}, gen {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 277, :column 7, :end-line 277, :end-column 10, :arglists (quote ([spec] [spec overrides])), :doc "Given a spec, returns the generator for it, or throws if none can\n  be constructed. Optionally an overrides map can be provided which\n  should map spec names or paths (vectors of keywords) to no-arg\n  generator-creating fns. These will be used instead of the generators at those\n  names/paths. Note that parent generator (in the spec or overrides\n  map) will supersede those of any subtrees. A generator for a regex\n  op must always return a sequential collection (i.e. a generator for\n  s/? should return either an empty sequence/vector or a\n  sequence/vector with one item in it)", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([spec] [spec overrides]), :arglists ([spec] [spec overrides]), :arglists-meta (nil nil)}}, :name cljs.spec.alpha/gen, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 10, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([spec] [spec overrides]), :arglists ([spec] [spec overrides]), :arglists-meta (nil nil)}, :method-params ([spec] [spec overrides]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 277, :end-line 277, :max-fixed-arity 2, :fn-var true, :arglists ([spec] [spec overrides]), :doc "Given a spec, returns the generator for it, or throws if none can\n  be constructed. Optionally an overrides map can be provided which\n  should map spec names or paths (vectors of keywords) to no-arg\n  generator-creating fns. These will be used instead of the generators at those\n  names/paths. Note that parent generator (in the spec or overrides\n  map) will supersede those of any subtrees. A generator for a regex\n  op must always return a sequential collection (i.e. a generator for\n  s/? should return either an empty sequence/vector or a\n  sequence/vector with one item in it)"}, t_cljs$spec$alpha11228 {:num-fields 9, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta cljs.core/ILookup}, :name cljs.spec.alpha/t_cljs$spec$alpha11228, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :type true, :anonymous true, :column 5, :line 1285, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/ILookup}}, nonconforming {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 1328, :column 7, :end-line 1328, :end-column 20, :arglists (quote ([spec])), :doc "takes a spec and returns a spec that has the same properties except\n  'conform' returns the original (not the conformed) value. Note, will specize regex ops."}, :name cljs.spec.alpha/nonconforming, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 20, :method-params ([spec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1328, :end-line 1328, :max-fixed-arity 1, :fn-var true, :arglists (quote ([spec])), :doc "takes a spec and returns a spec that has the same properties except\n  'conform' returns the original (not the conformed) value. Note, will specize regex ops."}, ->t_cljs$spec$alpha10913 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([forms preds gfn specs cform meta10914])), :file nil}, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta}, :name cljs.spec.alpha/->t_cljs$spec$alpha10913, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :method-params ([forms preds gfn specs cform meta10914]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 731, :max-fixed-arity 6, :fn-var true, :arglists (quote ([forms preds gfn specs cform meta10914])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, unform* {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 41, :column 4, :end-line 41, :end-column 11, :protocol cljs.spec.alpha/Spec, :doc nil, :arglists (quote ([spec y]))}, :protocol cljs.spec.alpha/Spec, :name cljs.spec.alpha/unform*, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 11, :method-params ([spec y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 41, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec y])), :doc nil}, ->sym {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 305, :column 8, :end-line 305, :end-column 13, :private true, :arglists (quote ([x])), :doc "Returns a symbol from a symbol or var"}, :private true, :name cljs.spec.alpha/->sym, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 13, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 305, :end-line 305, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Returns a symbol from a symbol or var"}, abbrev {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 168, :column 7, :end-line 168, :end-column 13, :arglists (quote ([form]))}, :name cljs.spec.alpha/abbrev, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 13, :method-params ([form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 168, :end-line 168, :max-fixed-arity 1, :fn-var true, :arglists (quote ([form]))}, regex? {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 80, :column 7, :end-line 80, :end-column 13, :arglists (quote ([x])), :doc "returns x if x is a (clojure.spec) regex op, else logical false"}, :name cljs.spec.alpha/regex?, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 13, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 80, :end-line 80, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "returns x if x is a (clojure.spec) regex op, else logical false"}, t_cljs$spec$alpha11254 {:num-fields 5, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta}, :name cljs.spec.alpha/t_cljs$spec$alpha11254, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :type true, :anonymous true, :column 5, :line 1353, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t_cljs$spec$alpha10807 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([keys forms preds gfn id kps specs cform meta10808])), :file nil}, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta}, :name cljs.spec.alpha/->t_cljs$spec$alpha10807, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :method-params ([keys forms preds gfn id kps specs cform meta10808]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 648, :max-fixed-arity 9, :fn-var true, :arglists (quote ([keys forms preds gfn id kps specs cform meta10808])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, int-in-range? {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 1391, :column 7, :end-line 1391, :end-column 20, :arglists (quote ([start end val])), :doc "Return true if start <= val and val < end"}, :name cljs.spec.alpha/int-in-range?, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 20, :method-params ([start end val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1391, :end-line 1391, :max-fixed-arity 3, :fn-var true, :arglists (quote ([start end val])), :doc "Return true if start <= val and val < end"}, dt {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 340, :column 8, :end-line 340, :end-column 10, :private true, :arglists (quote ([pred x form] [pred x form cpred?])), :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([pred x form] [pred x form cpred?]), :arglists ([pred x form] [pred x form cpred?]), :arglists-meta (nil nil)}}, :private true, :name cljs.spec.alpha/dt, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 10, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([pred x form] [pred x form cpred?]), :arglists ([pred x form] [pred x form cpred?]), :arglists-meta (nil nil)}, :method-params ([pred x form] [pred x form cpred?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 340, :end-line 340, :max-fixed-arity 4, :fn-var true, :arglists ([pred x form] [pred x form cpred?])}, preturn {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 1016, :column 8, :end-line 1016, :end-column 15, :private true, :arglists (quote ([p]))}, :private true, :name cljs.spec.alpha/preturn, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 15, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1016, :end-line 1016, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p]))}, re-conform {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 1194, :column 8, :end-line 1194, :end-column 18, :private true, :arglists (quote ([p [x & xs :as data]]))}, :private true, :name cljs.spec.alpha/re-conform, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 18, :method-params ([p p__11177]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1194, :end-line 1194, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p [x & xs :as data]]))}, spec? {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 74, :column 7, :end-line 74, :end-column 12, :arglists (quote ([x])), :doc "returns x if x is a spec object, else logical false"}, :name cljs.spec.alpha/spec?, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 12, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 74, :end-line 74, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "returns x if x is a spec object, else logical false"}, registry {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 300, :column 7, :end-line 300, :end-column 15, :arglists (quote ([])), :doc "returns the registry map, prefer 'get-spec' to lookup a spec by name"}, :name cljs.spec.alpha/registry, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 15, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 300, :end-line 300, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "returns the registry map, prefer 'get-spec' to lookup a spec by name"}, ->t_cljs$spec$alpha11209 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([re gfn meta11210])), :file nil}, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta}, :name cljs.spec.alpha/->t_cljs$spec$alpha11209, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :method-params ([re gfn meta11210]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 1236, :max-fixed-arity 3, :fn-var true, :arglists (quote ([re gfn meta11210])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, rep+impl {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 951, :column 19, :end-line 951, :end-column 27, :skip-wiki true, :arglists (quote ([form p])), :doc "Do not call this directly, use '+'"}, :name cljs.spec.alpha/rep+impl, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 27, :method-params ([form p]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 951, :end-line 951, :max-fixed-arity 2, :fn-var true, :arglists (quote ([form p])), :doc "Do not call this directly, use '+'"}, deriv {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 1065, :column 8, :end-line 1065, :end-column 13, :private true, :arglists (quote ([p x]))}, :private true, :name cljs.spec.alpha/deriv, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 13, :method-params ([p x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1065, :end-line 1065, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p x]))}, t_cljs$spec$alpha10917 {:num-fields 6, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta}, :name cljs.spec.alpha/t_cljs$spec$alpha10917, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :type true, :anonymous true, :column 5, :line 731, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, deep-resolve {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 49, :column 8, :end-line 49, :end-column 20, :private true, :arglists (quote ([reg k]))}, :private true, :name cljs.spec.alpha/deep-resolve, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 20, :method-params ([reg k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 49, :end-line 49, :max-fixed-arity 2, :fn-var true, :arglists (quote ([reg k]))}, exercise {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 1375, :column 7, :end-line 1375, :end-column 15, :arglists (quote ([spec] [spec n] [spec n overrides])), :doc "generates a number (default 10) of values compatible with spec and maps conform over them,\n  returning a sequence of [val conformed-val] tuples. Optionally takes\n  a generator overrides map as per gen", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([spec] [spec n] [spec n overrides]), :arglists ([spec] [spec n] [spec n overrides]), :arglists-meta (nil nil nil)}}, :name cljs.spec.alpha/exercise, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([spec] [spec n] [spec n overrides]), :arglists ([spec] [spec n] [spec n overrides]), :arglists-meta (nil nil nil)}, :method-params ([spec] [spec n] [spec n overrides]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 1375, :end-line 1375, :max-fixed-arity 3, :fn-var true, :arglists ([spec] [spec n] [spec n overrides]), :doc "generates a number (default 10) of values compatible with spec and maps conform over them,\n  returning a sequence of [val conformed-val] tuples. Optionally takes\n  a generator overrides map as per gen"}, t_cljs$spec$alpha10947 {:num-fields 25, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta}, :name cljs.spec.alpha/t_cljs$spec$alpha10947, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :type true, :anonymous true, :column 6, :line 830, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, explain-data {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 205, :column 7, :end-line 205, :end-column 19, :arglists (quote ([spec x])), :doc "Given a spec and a value x which ought to conform, returns nil if x\n  conforms, else a map with at least the key ::problems whose value is\n  a collection of problem-maps, where problem-map has at least :path :pred and :val\n  keys describing the predicate and the value that failed at that\n  path."}, :name cljs.spec.alpha/explain-data, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 19, :method-params ([spec x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 205, :end-line 205, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec x])), :doc "Given a spec and a value x which ought to conform, returns nil if x\n  conforms, else a map with at least the key ::problems whose value is\n  a collection of problem-maps, where problem-map has at least :path :pred and :val\n  keys describing the predicate and the value that failed at that\n  path."}, tuple-impl {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 542, :column 19, :end-line 542, :end-column 29, :skip-wiki true, :arglists (quote ([forms preds] [forms preds gfn])), :doc "Do not call this directly, use 'tuple'", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([forms preds] [forms preds gfn]), :arglists ([forms preds] [forms preds gfn]), :arglists-meta (nil nil)}}, :name cljs.spec.alpha/tuple-impl, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 29, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([forms preds] [forms preds gfn]), :arglists ([forms preds] [forms preds gfn]), :arglists-meta (nil nil)}, :method-params ([forms preds] [forms preds gfn]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 542, :end-line 542, :max-fixed-arity 3, :fn-var true, :arglists ([forms preds] [forms preds gfn]), :doc "Do not call this directly, use 'tuple'"}, multi-spec-impl {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 492, :column 19, :end-line 492, :end-column 34, :skip-wiki true, :arglists (quote ([form mmvar retag] [form mmvar retag gfn])), :doc "Do not call this directly, use 'multi-spec'", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([form mmvar retag] [form mmvar retag gfn]), :arglists ([form mmvar retag] [form mmvar retag gfn]), :arglists-meta (nil nil)}}, :name cljs.spec.alpha/multi-spec-impl, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 34, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([form mmvar retag] [form mmvar retag gfn]), :arglists ([form mmvar retag] [form mmvar retag gfn]), :arglists-meta (nil nil)}, :method-params ([form mmvar retag] [form mmvar retag gfn]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 492, :end-line 492, :max-fixed-arity 4, :fn-var true, :arglists ([form mmvar retag] [form mmvar retag gfn]), :doc "Do not call this directly, use 'multi-spec'"}, conform {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 149, :column 7, :end-line 149, :end-column 14, :arglists (quote ([spec x])), :doc "Given a spec and a value, returns :clojure.spec/invalid if value does not match spec,\n  else the (possibly destructured) value."}, :name cljs.spec.alpha/conform, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 14, :method-params ([spec x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 149, :end-line 149, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec x])), :doc "Given a spec and a value, returns :clojure.spec/invalid if value does not match spec,\n  else the (possibly destructured) value."}, t_cljs$spec$alpha11222 {:num-fields 9, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta cljs.core/ILookup}, :name cljs.spec.alpha/t_cljs$spec$alpha11222, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :type true, :anonymous true, :column 5, :line 1285, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/ILookup}}, gen* {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 43, :column 4, :end-line 43, :end-column 8, :protocol cljs.spec.alpha/Spec, :doc nil, :arglists (quote ([spec overrides path rmap]))}, :protocol cljs.spec.alpha/Spec, :name cljs.spec.alpha/gen*, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 8, :method-params ([spec overrides path rmap]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 43, :max-fixed-arity 4, :fn-var true, :arglists (quote ([spec overrides path rmap])), :doc nil}, fspec-impl {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 1281, :column 19, :end-line 1281, :end-column 29, :skip-wiki true, :arglists (quote ([argspec aform retspec rform fnspec fform gfn])), :doc "Do not call this directly, use 'fspec'"}, :name cljs.spec.alpha/fspec-impl, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 29, :method-params ([argspec aform retspec rform fnspec fform gfn]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 1281, :end-line 1281, :max-fixed-arity 7, :fn-var true, :arglists (quote ([argspec aform retspec rform fnspec fform gfn])), :doc "Do not call this directly, use 'fspec'"}, inck {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 337, :column 8, :end-line 337, :end-column 12, :private true, :arglists (quote ([m k]))}, :private true, :name cljs.spec.alpha/inck, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 12, :method-params ([m k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 337, :end-line 337, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m k]))}, t_cljs$spec$alpha10775 {:num-fields 9, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta}, :name cljs.spec.alpha/t_cljs$spec$alpha10775, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :type true, :anonymous true, :column 6, :line 504, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t_cljs$spec$alpha10815 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([keys forms preds gfn id kps specs cform meta10816])), :file nil}, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta}, :name cljs.spec.alpha/->t_cljs$spec$alpha10815, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :method-params ([keys forms preds gfn id kps specs cform meta10816]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 648, :max-fixed-arity 9, :fn-var true, :arglists (quote ([keys forms preds gfn id kps specs cform meta10816])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t_cljs$spec$alpha11248 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([spec meta11249])), :file nil}, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta}, :name cljs.spec.alpha/->t_cljs$spec$alpha11248, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :method-params ([spec meta11249]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 1333, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec meta11249])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, *coll-check-limit* {:meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 31, :column 16, :end-line 31, :end-column 34, :dynamic true}, :name cljs.spec.alpha/*coll-check-limit*, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 34, :column 1, :dynamic true, :line 31, :end-line 31, :tag number, :doc "The number of items validated in a collection spec'ed with 'every'"}, get-spec {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 312, :column 7, :end-line 312, :end-column 15, :arglists (quote ([k])), :doc "Returns spec registered for keyword/symbol/var k, or nil."}, :name cljs.spec.alpha/get-spec, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 15, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 312, :end-line 312, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k])), :doc "Returns spec registered for keyword/symbol/var k, or nil."}, gensub {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 266, :column 8, :end-line 266, :end-column 14, :private true, :arglists (quote ([spec overrides path rmap form]))}, :private true, :name cljs.spec.alpha/gensub, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 14, :method-params ([spec overrides path rmap form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 266, :end-line 266, :max-fixed-arity 5, :fn-var true, :arglists (quote ([spec overrides path rmap form]))}, the-spec {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 116, :column 8, :end-line 116, :end-column 16, :private true, :arglists (quote ([spec-or-k])), :doc "spec-or-k must be a spec, regex or kw/sym, else returns nil. Throws if unresolvable kw/sym"}, :private true, :name cljs.spec.alpha/the-spec, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 16, :method-params ([spec-or-k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 116, :end-line 116, :max-fixed-arity 1, :fn-var true, :arglists (quote ([spec-or-k])), :doc "spec-or-k must be a spec, regex or kw/sym, else returns nil. Throws if unresolvable kw/sym"}, coll-prob {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 744, :column 8, :end-line 744, :end-column 17, :private true, :arglists (quote ([x kfn kform distinct count min-count max-count path via in]))}, :private true, :name cljs.spec.alpha/coll-prob, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 17, :method-params ([x kfn kform distinct count min-count max-count path via in]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 744, :end-line 744, :max-fixed-arity 10, :fn-var true, :arglists (quote ([x kfn kform distinct count min-count max-count path via in]))}, every-impl {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 792, :column 19, :end-line 792, :end-column 29, :skip-wiki true, :arglists (quote ([form pred opts] [form pred {gen-into :into, describe-form :cljs.spec.alpha/describe, :keys [kind :cljs.spec.alpha/kind-form count max-count min-count distinct gen-max :cljs.spec.alpha/kfn :cljs.spec.alpha/cpred conform-keys :cljs.spec.alpha/conform-all], :or {gen-max 20}, :as opts} gfn])), :doc "Do not call this directly, use 'every', 'every-kv', 'coll-of' or 'map-of'", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([form pred opts] [form pred {gen-into :into, describe-form :cljs.spec.alpha/describe, :keys [kind :cljs.spec.alpha/kind-form count max-count min-count distinct gen-max :cljs.spec.alpha/kfn :cljs.spec.alpha/cpred conform-keys :cljs.spec.alpha/conform-all], :or {gen-max 20}, :as opts} gfn]), :arglists ([form pred opts] [form pred {gen-into :into, describe-form :cljs.spec.alpha/describe, :keys [kind :cljs.spec.alpha/kind-form count max-count min-count distinct gen-max :cljs.spec.alpha/kfn :cljs.spec.alpha/cpred conform-keys :cljs.spec.alpha/conform-all], :or {gen-max 20}, :as opts} gfn]), :arglists-meta (nil nil)}}, :name cljs.spec.alpha/every-impl, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 29, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([form pred opts] [form pred {gen-into :into, describe-form :cljs.spec.alpha/describe, :keys [kind :cljs.spec.alpha/kind-form count max-count min-count distinct gen-max :cljs.spec.alpha/kfn :cljs.spec.alpha/cpred conform-keys :cljs.spec.alpha/conform-all], :or {gen-max 20}, :as opts} gfn]), :arglists ([form pred opts] [form pred {gen-into :into, describe-form :cljs.spec.alpha/describe, :keys [kind :cljs.spec.alpha/kind-form count max-count min-count distinct gen-max :cljs.spec.alpha/kfn :cljs.spec.alpha/cpred conform-keys :cljs.spec.alpha/conform-all], :or {gen-max 20}, :as opts} gfn]), :arglists-meta (nil nil)}, :method-params ([form pred opts] [form pred {gen-into :into, describe-form :cljs.spec.alpha/describe, :keys [kind :cljs.spec.alpha/kind-form count max-count min-count distinct gen-max :cljs.spec.alpha/kfn :cljs.spec.alpha/cpred conform-keys :cljs.spec.alpha/conform-all], :or {gen-max 20}, :as opts} gfn]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 792, :end-line 792, :max-fixed-arity 4, :fn-var true, :arglists ([form pred opts] [form pred {gen-into :into, describe-form :cljs.spec.alpha/describe, :keys [kind :cljs.spec.alpha/kind-form count max-count min-count distinct gen-max :cljs.spec.alpha/kfn :cljs.spec.alpha/cpred conform-keys :cljs.spec.alpha/conform-all], :or {gen-max 20}, :as opts} gfn]), :doc "Do not call this directly, use 'every', 'every-kv', 'coll-of' or 'map-of'"}, accept-nil? {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 1001, :column 8, :end-line 1001, :end-column 19, :private true, :arglists (quote ([p]))}, :private true, :name cljs.spec.alpha/accept-nil?, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 19, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1001, :end-line 1001, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p]))}, maybe-spec {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 105, :column 8, :end-line 105, :end-column 18, :private true, :arglists (quote ([spec-or-k])), :doc "spec-or-k must be a spec, regex or resolvable kw/sym, else returns nil."}, :private true, :name cljs.spec.alpha/maybe-spec, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 18, :method-params ([spec-or-k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 105, :end-line 105, :max-fixed-arity 1, :fn-var true, :arglists (quote ([spec-or-k])), :doc "spec-or-k must be a spec, regex or resolvable kw/sym, else returns nil."}, spec-impl {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 459, :column 19, :end-line 459, :end-column 28, :skip-wiki true, :arglists (quote ([form pred gfn cpred?] [form pred gfn cpred? unc])), :doc "Do not call this directly, use 'spec'", :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([form pred gfn cpred?] [form pred gfn cpred? unc]), :arglists ([form pred gfn cpred?] [form pred gfn cpred? unc]), :arglists-meta (nil nil)}}, :name cljs.spec.alpha/spec-impl, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 28, :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([form pred gfn cpred?] [form pred gfn cpred? unc]), :arglists ([form pred gfn cpred?] [form pred gfn cpred? unc]), :arglists-meta (nil nil)}, :method-params ([form pred gfn cpred?] [form pred gfn cpred? unc]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 459, :end-line 459, :max-fixed-arity 5, :fn-var true, :arglists ([form pred gfn cpred?] [form pred gfn cpred? unc]), :doc "Do not call this directly, use 'spec'"}, t_cljs$spec$alpha10815 {:num-fields 9, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta}, :name cljs.spec.alpha/t_cljs$spec$alpha10815, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :type true, :anonymous true, :column 5, :line 648, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t_cljs$spec$alpha10934 {:num-fields 4, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta}, :name cljs.spec.alpha/t_cljs$spec$alpha10934, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :type true, :anonymous true, :column 3, :line 767, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t_cljs$spec$alpha10775 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([form mmvar retag gfn id predx dval tag meta10776])), :file nil}, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta}, :name cljs.spec.alpha/->t_cljs$spec$alpha10775, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :method-params ([form mmvar retag gfn id predx dval tag meta10776]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 6, :factory :positional, :line 504, :max-fixed-arity 9, :fn-var true, :arglists (quote ([form mmvar retag gfn id predx dval tag meta10776])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, invalid? {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 144, :column 7, :end-line 144, :end-column 15, :arglists (quote ([ret])), :doc "tests the validity of a conform return value"}, :name cljs.spec.alpha/invalid?, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 15, :method-params ([ret]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 144, :end-line 144, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ret])), :doc "tests the validity of a conform return value"}, amp-impl {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 956, :column 19, :end-line 956, :end-column 27, :skip-wiki true, :arglists (quote ([re preds pred-forms])), :doc "Do not call this directly, use '&'"}, :name cljs.spec.alpha/amp-impl, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 27, :method-params ([re preds pred-forms]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 956, :end-line 956, :max-fixed-arity 3, :fn-var true, :arglists (quote ([re preds pred-forms])), :doc "Do not call this directly, use '&'"}, pcat* {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 923, :column 8, :end-line 923, :end-column 13, :private true, :arglists (quote ([{[p1 & pr :as ps] :ps, [k1 & kr :as ks] :ks, [f1 & fr :as forms] :forms, ret :ret, rep+ :rep+}]))}, :private true, :name cljs.spec.alpha/pcat*, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 13, :method-params ([p__10988]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 923, :end-line 923, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{[p1 & pr :as ps] :ps, [k1 & kr :as ks] :ks, [f1 & fr :as forms] :forms, ret :ret, rep+ :rep+}]))}, alt* {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 970, :column 8, :end-line 970, :end-column 12, :private true, :arglists (quote ([ps ks forms]))}, :private true, :name cljs.spec.alpha/alt*, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 12, :method-params ([ps ks forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 970, :end-line 970, :max-fixed-arity 3, :fn-var true, :arglists (quote ([ps ks forms]))}, cat-impl {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 935, :column 19, :end-line 935, :end-column 27, :skip-wiki true, :arglists (quote ([ks ps forms])), :doc "Do not call this directly, use 'cat'"}, :name cljs.spec.alpha/cat-impl, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 27, :method-params ([ks ps forms]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 935, :end-line 935, :max-fixed-arity 3, :fn-var true, :arglists (quote ([ks ps forms])), :doc "Do not call this directly, use 'cat'"}, macroexpand-check {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 319, :column 8, :end-line 319, :end-column 25, :private true, :arglists (quote ([v args]))}, :private true, :name cljs.spec.alpha/macroexpand-check, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 25, :method-params ([v args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 319, :end-line 319, :max-fixed-arity 2, :fn-var true, :arglists (quote ([v args]))}, reg-resolve {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 55, :column 8, :end-line 55, :end-column 19, :private true, :arglists (quote ([k])), :doc "returns the spec/regex at end of alias chain starting with k, nil if not found, k if k not ident"}, :private true, :name cljs.spec.alpha/reg-resolve, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 19, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 55, :end-line 55, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k])), :doc "returns the spec/regex at end of alias chain starting with k, nil if not found, k if k not ident"}, t_cljs$spec$alpha10913 {:num-fields 6, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta}, :name cljs.spec.alpha/t_cljs$spec$alpha10913, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :type true, :anonymous true, :column 5, :line 731, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t_cljs$spec$alpha10710 {:num-fields 19, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta}, :name cljs.spec.alpha/t_cljs$spec$alpha10710, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :type true, :anonymous true, :column 5, :line 383, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, explain-str {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 259, :column 7, :end-line 259, :end-column 18, :arglists (quote ([spec x])), :doc "Given a spec and a value that fails to conform, returns an explanation as a string."}, :name cljs.spec.alpha/explain-str, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 18, :method-params ([spec x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 259, :end-line 259, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec x])), :doc "Given a spec and a value that fails to conform, returns an explanation as a string."}, *compile-asserts* {:meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 1415, :column 3, :end-line 1415, :end-column 20, :dynamic true, :doc "If true, compiler will enable spec asserts, which are then\nsubject to runtime control via check-asserts? If false, compiler\nwill eliminate all spec assert overhead. See 'assert'.\nInitially set to the negation of the ':elide-asserts' compiler option.\nDefaults to true."}, :name cljs.spec.alpha/*compile-asserts*, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 20, :column 1, :dynamic true, :line 1408, :end-line 1415, :tag boolean, :doc "If true, compiler will enable spec asserts, which are then\nsubject to runtime control via check-asserts? If false, compiler\nwill eliminate all spec assert overhead. See 'assert'.\nInitially set to the negation of the ':elide-asserts' compiler option.\nDefaults to true."}, ->t_cljs$spec$alpha10760 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([form pred gfn cpred? unc meta10761])), :file nil}, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta}, :name cljs.spec.alpha/->t_cljs$spec$alpha10760, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :method-params ([form pred gfn cpred? unc meta10761]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 6, :factory :positional, :line 468, :max-fixed-arity 6, :fn-var true, :arglists (quote ([form pred gfn cpred? unc meta10761])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, with-gen {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 192, :column 7, :end-line 192, :end-column 15, :arglists (quote ([spec gen-fn])), :doc "Takes a spec and a no-arg, generator-returning fn and returns a version of that spec that uses that generator"}, :name cljs.spec.alpha/with-gen, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 15, :method-params ([spec gen-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 192, :end-line 192, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec gen-fn])), :doc "Takes a spec and a no-arg, generator-returning fn and returns a version of that spec that uses that generator"}, t_cljs$spec$alpha11251 {:num-fields 5, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta}, :name cljs.spec.alpha/t_cljs$spec$alpha11251, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :type true, :anonymous true, :column 5, :line 1353, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, conform* {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 40, :column 4, :end-line 40, :end-column 12, :protocol cljs.spec.alpha/Spec, :doc nil, :arglists (quote ([spec x]))}, :protocol cljs.spec.alpha/Spec, :name cljs.spec.alpha/conform*, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 12, :method-params ([spec x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 40, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec x])), :doc nil}, check-asserts? {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 1423, :column 16, :end-line 1423, :end-column 30, :tag boolean, :arglists (quote ([])), :doc "Returns the value set by check-asserts."}, :name cljs.spec.alpha/check-asserts?, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 30, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1423, :ret-tag boolean, :end-line 1423, :max-fixed-arity 0, :tag boolean, :fn-var true, :arglists (quote ([])), :doc "Returns the value set by check-asserts."}, noret? {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 993, :column 8, :end-line 993, :end-column 14, :private true, :arglists (quote ([p1 pret]))}, :private true, :name cljs.spec.alpha/noret?, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 14, :method-params ([p1 pret]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 993, :end-line 993, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p1 pret]))}, rep-impl {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 947, :column 19, :end-line 947, :end-column 27, :skip-wiki true, :arglists (quote ([form p])), :doc "Do not call this directly, use '*'"}, :name cljs.spec.alpha/rep-impl, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 27, :method-params ([form p]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 947, :end-line 947, :max-fixed-arity 2, :fn-var true, :arglists (quote ([form p])), :doc "Do not call this directly, use '*'"}, ->t_cljs$spec$alpha10934 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([forms preds gfn meta10935])), :file nil}, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta}, :name cljs.spec.alpha/->t_cljs$spec$alpha10934, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :method-params ([forms preds gfn meta10935]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 767, :max-fixed-arity 4, :fn-var true, :arglists (quote ([forms preds gfn meta10935])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, op-describe {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 1085, :column 8, :end-line 1085, :end-column 19, :private true, :arglists (quote ([p]))}, :private true, :name cljs.spec.alpha/op-describe, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 19, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1085, :end-line 1085, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p]))}, describe {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 187, :column 7, :end-line 187, :end-column 15, :arglists (quote ([spec])), :doc "returns an abbreviated description of the spec as data"}, :name cljs.spec.alpha/describe, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 15, :method-params ([spec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 187, :end-line 187, :max-fixed-arity 1, :fn-var true, :arglists (quote ([spec])), :doc "returns an abbreviated description of the spec as data"}, explain-1 {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 369, :column 8, :end-line 369, :end-column 17, :private true, :arglists (quote ([form pred path via in v]))}, :private true, :name cljs.spec.alpha/explain-1, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 17, :method-params ([form pred path via in v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 369, :end-line 369, :max-fixed-arity 6, :fn-var true, :arglists (quote ([form pred path via in v]))}, explain-out {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 248, :column 7, :end-line 248, :end-column 18, :arglists (quote ([ed])), :doc "Prints explanation data (per 'explain-data') to *out* using the printer in *explain-out*,\n    by default explain-printer."}, :name cljs.spec.alpha/explain-out, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 18, :method-params ([ed]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 248, :end-line 248, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ed])), :doc "Prints explanation data (per 'explain-data') to *out* using the printer in *explain-out*,\n    by default explain-printer."}, re-gen {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 1156, :column 8, :end-line 1156, :end-column 14, :private true, :arglists (quote ([p overrides path rmap f]))}, :private true, :name cljs.spec.alpha/re-gen, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 14, :method-params ([p overrides path rmap f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1156, :end-line 1156, :max-fixed-arity 5, :fn-var true, :arglists (quote ([p overrides path rmap f]))}, t_cljs$spec$alpha10807 {:num-fields 9, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta}, :name cljs.spec.alpha/t_cljs$spec$alpha10807, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :type true, :anonymous true, :column 5, :line 648, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, filter-alt {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 961, :column 8, :end-line 961, :end-column 18, :private true, :arglists (quote ([ps ks forms f]))}, :private true, :name cljs.spec.alpha/filter-alt, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 18, :method-params ([ps ks forms f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 961, :end-line 961, :max-fixed-arity 4, :fn-var true, :arglists (quote ([ps ks forms f]))}, ->t_cljs$spec$alpha10917 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([forms preds gfn specs cform meta10918])), :file nil}, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta}, :name cljs.spec.alpha/->t_cljs$spec$alpha10917, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :method-params ([forms preds gfn specs cform meta10918]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 731, :max-fixed-arity 6, :fn-var true, :arglists (quote ([forms preds gfn specs cform meta10918])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, and-preds {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 677, :column 8, :end-line 677, :end-column 17, :private true, :arglists (quote ([x preds forms]))}, :private true, :name cljs.spec.alpha/and-preds, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 17, :method-params ([x preds forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 677, :end-line 677, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x preds forms]))}, call-valid? {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 1260, :column 8, :end-line 1260, :end-column 19, :private true, :arglists (quote ([f specs args]))}, :private true, :name cljs.spec.alpha/call-valid?, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 19, :method-params ([f specs args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1260, :end-line 1260, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f specs args]))}, ->t_cljs$spec$alpha11254 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([form pred gfn spec meta11255])), :file nil}, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta}, :name cljs.spec.alpha/->t_cljs$spec$alpha11254, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :method-params ([form pred gfn spec meta11255]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 1353, :max-fixed-arity 5, :fn-var true, :arglists (quote ([form pred gfn spec meta11255])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, op-unform {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 1031, :column 8, :end-line 1031, :end-column 17, :private true, :arglists (quote ([p x]))}, :private true, :name cljs.spec.alpha/op-unform, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 17, :method-params ([p x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1031, :end-line 1031, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p x]))}, rep* {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 940, :column 8, :end-line 940, :end-column 12, :private true, :arglists (quote ([p1 p2 ret splice form]))}, :private true, :name cljs.spec.alpha/rep*, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 12, :method-params ([p1 p2 ret splice form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 940, :end-line 940, :max-fixed-arity 5, :fn-var true, :arglists (quote ([p1 p2 ret splice form]))}, specize* {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 124, :column 4, :end-line 124, :end-column 12, :protocol cljs.spec.alpha/Specize, :doc nil, :arglists (quote ([_] [_ form])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([_] [_ form]), :arglists ([_] [_ form]), :arglists-meta (nil nil)}}, :protocol cljs.spec.alpha/Specize, :name cljs.spec.alpha/specize*, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([_] [_ form]), :arglists ([_] [_ form]), :arglists-meta (nil nil)}, :method-params ([_] [_ form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 123, :end-line 124, :max-fixed-arity 2, :fn-var true, :arglists ([_] [_ form]), :doc nil}, maybe-impl {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 989, :column 19, :end-line 989, :end-column 29, :skip-wiki true, :arglists (quote ([p form])), :doc "Do not call this directly, use '?'"}, :name cljs.spec.alpha/maybe-impl, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 29, :method-params ([p form]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 989, :end-line 989, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p form])), :doc "Do not call this directly, use '?'"}, pcat {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 933, :column 8, :end-line 933, :end-column 12, :private true, :arglists (quote ([& ps])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(ps)], :arglists ([& ps]), :arglists-meta (nil)}}, :private true, :name cljs.spec.alpha/pcat, :variadic true, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(ps)], :arglists ([& ps]), :arglists-meta (nil)}, :method-params [(ps)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 933, :end-line 933, :max-fixed-arity 0, :fn-var true, :arglists ([& ps])}, explain* {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 42, :column 4, :end-line 42, :end-column 12, :protocol cljs.spec.alpha/Spec, :doc nil, :arglists (quote ([spec path via in x]))}, :protocol cljs.spec.alpha/Spec, :name cljs.spec.alpha/explain*, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 12, :method-params ([spec path via in x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 42, :max-fixed-arity 5, :fn-var true, :arglists (quote ([spec path via in x])), :doc nil}, validate-fn {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/cljs/spec/alpha.cljs", :line 1271, :column 8, :end-line 1271, :end-column 19, :private true, :arglists (quote ([f specs iters])), :doc "returns f if valid, else smallest"}, :private true, :name cljs.spec.alpha/validate-fn, :variadic false, :file "resources/public/js/compiled/out/cljs/spec/alpha.cljs", :end-column 19, :method-params ([f specs iters]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1271, :end-line 1271, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f specs iters])), :doc "returns f if valid, else smallest"}}, :require-macros {c cljs.core, cljs.core cljs.core, s cljs.spec.alpha, cljs.spec.alpha cljs.spec.alpha, gen cljs.spec.gen.alpha, cljs.spec.gen.alpha cljs.spec.gen.alpha}, :cljs.analyzer/constants {:seen #{form tag max-count :args :cljs.spec.alpha/failure cljs.spec.alpha/* :max-tries :path :req-un :opt-un unc cljs.spec.alpha/+ :p2 :ret :cljs.spec.alpha/unknown :gfn meta10776 :cljs.spec.alpha/recursion-limit meta10914 :cljs.spec.alpha/name :pred-exprs :into :keys-pred vector? :gen-max p__10944 :shrunk :fn cljs.spec.alpha/alt predx meta10794 :rep+ cljs.core/= meta10918 :opt-keys aform keys->specnames :cljs.spec.alpha/rep :pred dval :splice check? forms opt :cljs.spec.alpha/accept argspec :else :ks cljs.core/count cljs.spec.alpha/and req-un opt-un cljs.spec.alpha/cat map__10708 :_ :cljs.spec.alpha/kind-form :maybe :via cljs.spec.alpha/every meta11249 p__10668 :req-specs cljs.spec.alpha/or gfn :cljs.spec.alpha/gfn gen-max meta11213 fnspec v map? pred-exprs :conform-keys keys-pred cpred? cljs.spec.alpha/fspec argm fn :val fform :cljs.spec.alpha/op cljs.spec.alpha/nilable opt-keys :cljs.spec.alpha/v cljs.spec.alpha/tuple pred :cljs.spec.alpha/cpred :p1 cljs.core/zipmap :cljs.spec.alpha/problems cpred % cljs.core/map :cljs.spec.alpha/kvs->map method meta10808 :distinct req-specs map__10945 cljs.spec.alpha/keys re conform-keys kps :reason cljs.spec.alpha/merge :cljs.spec.alpha/invalid preds kind-form :req addcv map__10669 cfns nil? meta10932 :assertion-failed fn* p1__11239# cljs.core/<= cljs.spec.alpha/nonconforming :cljs.spec.alpha/amp :id describe-form :min-count meta10711 :kind :smallest :count cnt mmvar :req-keys retag k :cljs.spec.alpha/k cljs.core/fn distinct meta10948 retspec :opt-specs :cljs.spec.alpha/args p1__11240# rform ifn? :pred-forms meta11210 req spec meta11252 keys meta10761 distinct? meta11246 :max-count kfn :cljs.spec.alpha/kfn :max-elements meta11229 gen-into cljs.spec.alpha/multi-spec cljs.core/coll? id :num-elements meta11255 specs count meta11223 req-keys apply min-count opts kind cform :min-elements clojure.spec/& opt-specs conform-all :cljs.spec.alpha/conform-all :cljs.spec.alpha/alt meta10935 :forms :cljs.spec.alpha/pred meta10816 :cljs.spec.alpha/nil :ps k->s cljs.spec.alpha/conformer :in :cljs.spec.alpha/describe conform-into :accept :opt :cljs.spec.alpha/pcat pred-forms meta10672 cljs.spec.alpha/?}, :order [:cljs.spec.alpha/op :cljs.spec.alpha/name :cljs.spec.alpha/unknown :cljs.spec.alpha/invalid fn % :else :cljs.spec.alpha/gfn :cljs.spec.alpha/problems :path :pred :val :reason :via :in :cljs.spec.alpha/recursion-limit :args :cljs.spec.alpha/args :opt :req-un :opt-un :gfn :pred-exprs :keys-pred :opt-keys :req-specs :req :req-keys :opt-specs :pred-forms map? cljs.spec.alpha/keys keys->specnames opt req-un opt-un p__10668 gfn pred-exprs keys-pred argm opt-keys req-specs map__10669 req id req-keys opt-specs k->s pred-forms meta10672 map__10708 meta10711 form pred cpred? unc meta10761 method cljs.spec.alpha/multi-spec mmvar retag predx dval tag meta10776 vector? cljs.core/= cljs.core/count cljs.spec.alpha/tuple forms preds specs cnt meta10794 cljs.spec.alpha/or keys kps cform meta10808 meta10816 cljs.spec.alpha/and meta10914 meta10918 cljs.core/coll? cljs.core/<= distinct? cljs.spec.alpha/merge meta10932 meta10935 :max-count :cljs.spec.alpha/kind-form :gen-max :cljs.spec.alpha/cpred :conform-keys :cljs.spec.alpha/describe :distinct :cljs.spec.alpha/kfn :into :count :min-count :kind :cljs.spec.alpha/conform-all :num-elements :max-tries :min-elements :max-elements cljs.spec.alpha/every max-count p__10944 check? gen-max cpred map__10945 conform-keys kind-form addcv cfns describe-form distinct spec kfn gen-into count min-count opts kind conform-all conform-into meta10948 :ret :cljs.spec.alpha/accept :ps :ks :forms :rep+ :cljs.spec.alpha/pcat :p2 :splice :id :cljs.spec.alpha/rep :p1 cljs.spec.alpha/* :cljs.spec.alpha/amp :cljs.spec.alpha/alt :cljs.spec.alpha/nil :maybe clojure.spec/& cljs.spec.alpha/+ cljs.spec.alpha/cat :_ cljs.spec.alpha/? cljs.spec.alpha/alt :accept re meta11210 meta11213 :fn :smallest :shrunk apply ifn? cljs.spec.alpha/fspec argspec aform retspec rform fnspec fform meta11223 meta11229 :cljs.spec.alpha/kvs->map cljs.spec.alpha/conformer fn* p1__11239# cljs.core/zipmap cljs.core/map :cljs.spec.alpha/k :cljs.spec.alpha/v p1__11240# cljs.core/fn k v cljs.spec.alpha/nonconforming meta11246 meta11249 :cljs.spec.alpha/pred nil? cljs.spec.alpha/nilable meta11252 meta11255 :cljs.spec.alpha/failure :assertion-failed]}, :doc nil}