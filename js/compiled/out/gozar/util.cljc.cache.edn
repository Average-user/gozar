{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name gozar.util, :imports nil, :requires {parser gozar.sgfparser, gozar.sgfparser gozar.sgfparser}, :uses nil, :defs {neighbors {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/src/cljc/gozar/util.cljc", :line 65, :column 7, :end-line 65, :end-column 16, :arglists (quote ([f stones [x y]])), :doc "Returns the neighbors of [x y] that are true for f"}, :name gozar.util/neighbors, :variadic false, :file "/home/lucas/Dropbox/Clojure/gozar/src/cljc/gozar/util.cljc", :end-column 16, :method-params ([f stones p__9041]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 65, :end-line 65, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f stones [x y]])), :doc "Returns the neighbors of [x y] that are true for f"}, create-board {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/src/cljc/gozar/util.cljc", :line 7, :column 7, :end-line 7, :end-column 19, :arglists (quote ([handicap-stones turn komi]))}, :name gozar.util/create-board, :variadic false, :file "/home/lucas/Dropbox/Clojure/gozar/src/cljc/gozar/util.cljc", :end-column 19, :method-params ([handicap-stones turn komi]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 3, :fn-var true, :arglists (quote ([handicap-stones turn komi]))}, dead-group? {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/src/cljc/gozar/util.cljc", :line 86, :column 7, :end-line 86, :end-column 18, :arglists (quote ([stones [x y]])), :doc "Returns true if the group that contains [x y] has 0 liberties, false otherwise.\n  Returns nik if [x y] is :free"}, :name gozar.util/dead-group?, :variadic false, :file "/home/lucas/Dropbox/Clojure/gozar/src/cljc/gozar/util.cljc", :end-column 18, :method-params ([stones p__9093]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 86, :end-line 86, :max-fixed-arity 2, :fn-var true, :arglists (quote ([stones [x y]])), :doc "Returns true if the group that contains [x y] has 0 liberties, false otherwise.\n  Returns nik if [x y] is :free"}, valid-move? {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/src/cljc/gozar/util.cljc", :line 106, :column 7, :end-line 106, :end-column 18, :arglists (quote ([stones [x y] color]))}, :name gozar.util/valid-move?, :variadic false, :file "/home/lucas/Dropbox/Clojure/gozar/src/cljc/gozar/util.cljc", :end-column 18, :method-params ([stones p__9116 color]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 106, :end-line 106, :max-fixed-arity 3, :fn-var true, :arglists (quote ([stones [x y] color]))}, example3 {:name gozar.util/example3, :file "/home/lucas/Dropbox/Clojure/gozar/src/cljc/gozar/util.cljc", :line 53, :column 1, :end-line 53, :end-column 14, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/src/cljc/gozar/util.cljc", :line 53, :column 6, :end-line 53, :end-column 14}, :tag any}, example2 {:name gozar.util/example2, :file "/home/lucas/Dropbox/Clojure/gozar/src/cljc/gozar/util.cljc", :line 41, :column 1, :end-line 41, :end-column 14, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/src/cljc/gozar/util.cljc", :line 41, :column 6, :end-line 41, :end-column 14}, :tag any}, example1 {:name gozar.util/example1, :file "/home/lucas/Dropbox/Clojure/gozar/src/cljc/gozar/util.cljc", :line 29, :column 1, :end-line 29, :end-column 14, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/src/cljc/gozar/util.cljc", :line 29, :column 6, :end-line 29, :end-column 14}, :tag any}, take-until {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/src/cljc/gozar/util.cljc", :line 118, :column 7, :end-line 118, :end-column 17, :arglists (quote ([pred coll])), :doc "Returns every element before the first element that returns true for pred,\n   including the element itself. (take-until odd? '(2 4 6 8 9 10 12 14)) => '(2 4 6 8 9)"}, :name gozar.util/take-until, :variadic false, :file "/home/lucas/Dropbox/Clojure/gozar/src/cljc/gozar/util.cljc", :end-column 17, :method-params ([pred coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 118, :end-line 118, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pred coll])), :doc "Returns every element before the first element that returns true for pred,\n   including the element itself. (take-until odd? '(2 4 6 8 9 10 12 14)) => '(2 4 6 8 9)"}, stones {:name gozar.util/stones, :file "/home/lucas/Dropbox/Clojure/gozar/src/cljc/gozar/util.cljc", :line 4, :column 1, :end-line 4, :end-column 12, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/src/cljc/gozar/util.cljc", :line 4, :column 6, :end-line 4, :end-column 12}, :tag any}, remove-group {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/src/cljc/gozar/util.cljc", :line 93, :column 7, :end-line 93, :end-column 19, :arglists (quote ([stones [x y]]))}, :name gozar.util/remove-group, :variadic false, :file "/home/lucas/Dropbox/Clojure/gozar/src/cljc/gozar/util.cljc", :end-column 19, :method-params ([stones p__9102]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 93, :end-line 93, :max-fixed-arity 2, :fn-var true, :arglists (quote ([stones [x y]]))}, simulate-game {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/src/cljc/gozar/util.cljc", :line 131, :column 7, :end-line 131, :end-column 20, :arglists (quote ([file-string]))}, :name gozar.util/simulate-game, :variadic false, :file "/home/lucas/Dropbox/Clojure/gozar/src/cljc/gozar/util.cljc", :end-column 20, :method-params ([file-string]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 131, :end-line 131, :max-fixed-arity 1, :fn-var true, :arglists (quote ([file-string]))}, place-stone {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/src/cljc/gozar/util.cljc", :line 96, :column 7, :end-line 96, :end-column 18, :arglists (quote ([stones [x y] color]))}, :name gozar.util/place-stone, :variadic false, :file "/home/lucas/Dropbox/Clojure/gozar/src/cljc/gozar/util.cljc", :end-column 18, :method-params ([stones p__9109 color]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 96, :end-line 96, :max-fixed-arity 3, :fn-var true, :arglists (quote ([stones [x y] color]))}, stones->grid {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/src/cljc/gozar/util.cljc", :line 22, :column 7, :end-line 22, :end-column 19, :arglists (quote ([stones]))}, :name gozar.util/stones->grid, :variadic false, :file "/home/lucas/Dropbox/Clojure/gozar/src/cljc/gozar/util.cljc", :end-column 19, :method-params ([stones]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 1, :fn-var true, :arglists (quote ([stones]))}, child-board {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/src/cljc/gozar/util.cljc", :line 110, :column 7, :end-line 110, :end-column 18, :arglists (quote ([{:keys [stones turn], :as board} {:keys [player location]}]))}, :name gozar.util/child-board, :variadic false, :file "/home/lucas/Dropbox/Clojure/gozar/src/cljc/gozar/util.cljc", :end-column 18, :method-params ([p__9123 p__9124]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 110, :end-line 110, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [stones turn], :as board} {:keys [player location]}]))}, initial-board {:name gozar.util/initial-board, :file "/home/lucas/Dropbox/Clojure/gozar/src/cljc/gozar/util.cljc", :line 13, :column 1, :end-line 13, :end-column 19, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/src/cljc/gozar/util.cljc", :line 13, :column 6, :end-line 13, :end-column 19}, :tag any}, grid->stones {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/src/cljc/gozar/util.cljc", :line 17, :column 7, :end-line 17, :end-column 19, :arglists (quote ([grid]))}, :name gozar.util/grid->stones, :variadic false, :file "/home/lucas/Dropbox/Clojure/gozar/src/cljc/gozar/util.cljc", :end-column 19, :method-params ([grid]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 1, :fn-var true, :arglists (quote ([grid]))}, apply-moves {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/src/cljc/gozar/util.cljc", :line 128, :column 7, :end-line 128, :end-column 18, :arglists (quote ([board moves]))}, :name gozar.util/apply-moves, :variadic false, :file "/home/lucas/Dropbox/Clojure/gozar/src/cljc/gozar/util.cljc", :end-column 18, :method-params ([board moves]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 128, :end-line 128, :max-fixed-arity 2, :fn-var true, :arglists (quote ([board moves]))}, enemy {:name gozar.util/enemy, :file "/home/lucas/Dropbox/Clojure/gozar/src/cljc/gozar/util.cljc", :line 15, :column 1, :end-line 15, :end-column 11, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/src/cljc/gozar/util.cljc", :line 15, :column 6, :end-line 15, :end-column 11}, :tag cljs.core/IMap}, group-of {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/src/cljc/gozar/util.cljc", :line 72, :column 7, :end-line 72, :end-column 15, :arglists (quote ([stones [x y]])), :doc "Returns the group of stones that contains [x y], and nil if [x y] is free"}, :name gozar.util/group-of, :variadic false, :file "/home/lucas/Dropbox/Clojure/gozar/src/cljc/gozar/util.cljc", :end-column 15, :method-params ([stones p__9057]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 72, :end-line 72, :max-fixed-arity 2, :fn-var true, :arglists (quote ([stones [x y]])), :doc "Returns the group of stones that contains [x y], and nil if [x y] is free"}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:komi :stones :white :free :ko :turn :player :location :black}, :order [:free :stones :turn :ko :komi :white :black :player :location]}, :doc nil}