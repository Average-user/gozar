{:rename-macros {}, :renames {}, :externs {Error {}}, :use-macros {reagent-id re-frame.interop, console re-frame.loggers, dispose! re-frame.interop, add-on-dispose! re-frame.interop, make-reaction re-frame.interop, deref? re-frame.interop, ratom? re-frame.interop, debug-enabled? re-frame.interop}, :excludes #{}, :name re-frame.subs, :imports nil, :requires {re-frame.db re-frame.db, re-frame.interop re-frame.interop, re-frame.loggers re-frame.loggers, re-frame.utils re-frame.utils, re-frame.registrar re-frame.registrar, trace re-frame.trace, re-frame.trace re-frame.trace}, :uses {reagent-id re-frame.interop, console re-frame.loggers, app-db re-frame.db, dispose! re-frame.interop, add-on-dispose! re-frame.interop, make-reaction re-frame.interop, get-handler re-frame.registrar, first-in-vector re-frame.utils, deref? re-frame.interop, ratom? re-frame.interop, debug-enabled? re-frame.interop, clear-handlers re-frame.registrar, register-handler re-frame.registrar}, :defs {cache-and-return {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/re_frame/subs.cljc", :line 44, :column 7, :end-line 44, :end-column 23, :arglists (quote ([query-v dynv r])), :doc "cache the reaction r"}, :name re-frame.subs/cache-and-return, :variadic false, :file "resources/public/js/compiled/out/re_frame/subs.cljc", :end-column 23, :method-params ([query-v dynv r]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 44, :end-line 44, :max-fixed-arity 3, :fn-var true, :arglists (quote ([query-v dynv r])), :doc "cache the reaction r"}, deref-input-signals {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/re_frame/subs.cljc", :line 126, :column 8, :end-line 126, :end-column 27, :private true, :arglists (quote ([signals query-id]))}, :private true, :name re-frame.subs/deref-input-signals, :variadic false, :file "resources/public/js/compiled/out/re_frame/subs.cljc", :end-column 27, :method-params ([signals query-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 126, :end-line 126, :max-fixed-arity 2, :fn-var true, :arglists (quote ([signals query-id]))}, subscribe {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/re_frame/subs.cljc", :line 69, :column 7, :end-line 69, :end-column 16, :arglists (quote ([query-v] [v dynv])), :doc "Returns a Reagent/reaction which contains a computation", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([query-v] [v dynv]), :arglists ([query-v] [v dynv]), :arglists-meta (nil nil)}}, :name re-frame.subs/subscribe, :variadic false, :file "resources/public/js/compiled/out/re_frame/subs.cljc", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([query-v] [v dynv]), :arglists ([query-v] [v dynv]), :arglists-meta (nil nil)}, :method-params ([query-v] [v dynv]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 2, :fn-var true, :arglists ([query-v] [v dynv]), :doc "Returns a Reagent/reaction which contains a computation"}, reg-sub {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/re_frame/subs.cljc", :line 137, :column 7, :end-line 137, :end-column 14, :arglists (quote ([query-id & args])), :doc "Associate the given `query id` with a handler function and an optional signal function.\n\n  There's 3 ways this function can be called\n\n  1. (reg-sub\n       :test-sub\n       (fn [db [_]] db))\n  The value in app-db is passed to the computation function as the 1st argument.\n\n  2. (reg-sub\n       :a-b-sub\n       (fn [q-vec d-vec]\n         [(subs/subscribe [:a-sub])\n          (subs/subscribe [:b-sub])])\n       (fn [[a b] [_]] {:a a :b b}))\n\n  Two functions provided. The 2nd is computation function, as before. The 1st\n  is returns what `input signals` should be provided to the computation. The\n  `input signals` function is called with two arguments: the query vector\n  and the dynamic vector. The return value can be singleton reaction or\n  a sequence of reactions.\n\n  3. (reg-sub\n       :a-b-sub\n       :<- [:a-sub]\n       :<- [:b-sub]\n       (fn [[a b] [_]] {:a a :b b}))```\n  This 3rd variation is just syntactic sugar for the 2nd. Pairs are supplied instead\n  of an `input signals` functions. `:<-` is supplied followed by the subscription\n  vector.\n  ", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(query-id args)], :arglists ([query-id & args]), :arglists-meta (nil)}}, :name re-frame.subs/reg-sub, :variadic true, :file "resources/public/js/compiled/out/re_frame/subs.cljc", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(query-id args)], :arglists ([query-id & args]), :arglists-meta (nil)}, :method-params [(query-id args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 137, :end-line 137, :max-fixed-arity 1, :fn-var true, :arglists ([query-id & args]), :doc "Associate the given `query id` with a handler function and an optional signal function.\n\n  There's 3 ways this function can be called\n\n  1. (reg-sub\n       :test-sub\n       (fn [db [_]] db))\n  The value in app-db is passed to the computation function as the 1st argument.\n\n  2. (reg-sub\n       :a-b-sub\n       (fn [q-vec d-vec]\n         [(subs/subscribe [:a-sub])\n          (subs/subscribe [:b-sub])])\n       (fn [[a b] [_]] {:a a :b b}))\n\n  Two functions provided. The 2nd is computation function, as before. The 1st\n  is returns what `input signals` should be provided to the computation. The\n  `input signals` function is called with two arguments: the query vector\n  and the dynamic vector. The return value can be singleton reaction or\n  a sequence of reactions.\n\n  3. (reg-sub\n       :a-b-sub\n       :<- [:a-sub]\n       :<- [:b-sub]\n       (fn [[a b] [_]] {:a a :b b}))```\n  This 3rd variation is just syntactic sugar for the 2nd. Pairs are supplied instead\n  of an `input signals` functions. `:<-` is supplied followed by the subscription\n  vector.\n  "}, query->reaction {:name re-frame.subs/query->reaction, :file "resources/public/js/compiled/out/re_frame/subs.cljc", :line 18, :column 1, :end-line 18, :end-column 21, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/re_frame/subs.cljc", :line 18, :column 6, :end-line 18, :end-column 21}, :tag any}, clear-all-handlers! {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/re_frame/subs.cljc", :line 38, :column 7, :end-line 38, :end-column 26, :arglists (quote ([])), :doc "Unregisters all existing subscription handlers"}, :name re-frame.subs/clear-all-handlers!, :variadic false, :file "resources/public/js/compiled/out/re_frame/subs.cljc", :end-column 26, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Unregisters all existing subscription handlers"}, cache-lookup {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/re_frame/subs.cljc", :line 60, :column 7, :end-line 60, :end-column 19, :arglists (quote ([query-v] [query-v dyn-v])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([query-v] [query-v dyn-v]), :arglists ([query-v] [query-v dyn-v]), :arglists-meta (nil nil)}}, :name re-frame.subs/cache-lookup, :variadic false, :file "resources/public/js/compiled/out/re_frame/subs.cljc", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([query-v] [query-v dyn-v]), :arglists ([query-v] [query-v dyn-v]), :arglists-meta (nil nil)}, :method-params ([query-v] [query-v dyn-v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 60, :end-line 60, :max-fixed-arity 2, :fn-var true, :arglists ([query-v] [query-v dyn-v])}, map-vals {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/re_frame/subs.cljc", :line 117, :column 8, :end-line 117, :end-column 16, :private true, :arglists (quote ([f m])), :doc "Returns a new version of 'm' in which 'f' has been applied to each value.\n  (map-vals inc {:a 4, :b 2}) => {:a 5, :b 3}"}, :private true, :name re-frame.subs/map-vals, :variadic false, :file "resources/public/js/compiled/out/re_frame/subs.cljc", :end-column 16, :method-params ([f m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 117, :end-line 117, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f m])), :doc "Returns a new version of 'm' in which 'f' has been applied to each value.\n  (map-vals inc {:a 4, :b 2}) => {:a 5, :b 3}"}, kind {:name re-frame.subs/kind, :file "resources/public/js/compiled/out/re_frame/subs.cljc", :line 10, :column 1, :end-line 10, :end-column 10, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/re_frame/subs.cljc", :line 10, :column 6, :end-line 10, :end-column 10}, :tag cljs.core/Keyword}, clear-subscription-cache! {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/re_frame/subs.cljc", :line 20, :column 7, :end-line 20, :end-column 32, :arglists (quote ([])), :doc "Runs on-dispose for all subscriptions we have in the subscription cache.\n  Used to force recreation of new subscriptions. Should only be necessary\n  in development.\n\n  The on-dispose functions for the subscriptions will remove themselves from the\n  cache.\n\n  Useful when reloading Figwheel code after a React exception, as React components\n  aren't cleaned up properly. This means a subscription's on-dispose function isn't\n  run when the components are destroyed. If a bad subscription caused your exception,\n  then you can't fix it without reloading your browser."}, :name re-frame.subs/clear-subscription-cache!, :variadic false, :file "resources/public/js/compiled/out/re_frame/subs.cljc", :end-column 32, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Runs on-dispose for all subscriptions we have in the subscription cache.\n  Used to force recreation of new subscriptions. Should only be necessary\n  in development.\n\n  The on-dispose functions for the subscriptions will remove themselves from the\n  cache.\n\n  Useful when reloading Figwheel code after a React exception, as React components\n  aren't cleaned up properly. This means a subscription's on-dispose function isn't\n  run when the components are destroyed. If a bad subscription caused your exception,\n  then you can't fix it without reloading your browser."}}, :require-macros {trace re-frame.trace, re-frame.trace re-frame.trace}, :cljs.analyzer/constants {:seen #{:dyn-v :tags :sub/run :else :sub :sub/create :warn :operation :start :duration :query-v :cached? :sub/dispose :error :input-signals :end :reaction :op-type}, :order [:sub :warn :operation :op-type :tags :sub/dispose :query-v :reaction :start :error :else :duration :end :sub/create :cached? :dyn-v :input-signals :sub/run]}, :doc nil}