{:rename-macros {}, :renames {}, :externs {Error {}}, :use-macros {console re-frame.loggers}, :excludes #{}, :name re-frame.cofx, :imports nil, :requires {re-frame.db re-frame.db, re-frame.interceptor re-frame.interceptor, re-frame.registrar re-frame.registrar, re-frame.loggers re-frame.loggers}, :uses {console re-frame.loggers, app-db re-frame.db, ->interceptor re-frame.interceptor, get-handler re-frame.registrar, clear-handlers re-frame.registrar, register-handler re-frame.registrar}, :defs {kind {:name re-frame.cofx/kind, :file "resources/public/js/compiled/out/re_frame/cofx.cljc", :line 11, :column 1, :end-line 11, :end-column 10, :meta {:file "/home/average-user/Dropbox/Clojure/gozar/resources/public/js/compiled/out/re_frame/cofx.cljc", :line 11, :column 6, :end-line 11, :end-column 10}, :tag cljs.core/Keyword}, register {:name re-frame.cofx/register, :file "resources/public/js/compiled/out/re_frame/cofx.cljc", :line 13, :column 1, :end-line 13, :end-column 14, :meta {:file "/home/average-user/Dropbox/Clojure/gozar/resources/public/js/compiled/out/re_frame/cofx.cljc", :line 13, :column 6, :end-line 13, :end-column 14}, :tag any}, inject-cofx {:protocol-inline nil, :meta {:file "/home/average-user/Dropbox/Clojure/gozar/resources/public/js/compiled/out/re_frame/cofx.cljc", :line 18, :column 7, :end-line 18, :end-column 18, :arglists (quote ([id] [id value])), :doc "Returns an interceptor which adds to a `context's` `:coeffects`.\n\n  `coeffects` are the input resources required by an event handler\n   to perform its job. The two most obvious ones are `db` and `event`.\n   But sometimes a handler might need other resources.\n\n   Perhaps a handler needs a random number or a GUID or the current datetime.\n   Perhaps it needs access to the connection to a DataScript database.\n\n   If the handler directly access these resources, it stops being as\n   pure. It immedaitely becomes harder to test, etc.\n\n   So the necessary resources are \"injected\" into the `coeffect` (map)\n   given the handler.\n\n   Given an `id`, and an optional value, lookup the registered coeffect\n   handler (previously registered via `reg-cofx`) and it with two arguments:\n   the current value of `:coeffects` and, optionally, the value. The registered handler\n   is expected to return a modified coeffect.\n   ", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([id] [id value]), :arglists ([id] [id value]), :arglists-meta (nil nil)}}, :name re-frame.cofx/inject-cofx, :variadic false, :file "resources/public/js/compiled/out/re_frame/cofx.cljc", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([id] [id value]), :arglists ([id] [id value]), :arglists-meta (nil nil)}, :method-params ([id] [id value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 2, :fn-var true, :arglists ([id] [id value]), :doc "Returns an interceptor which adds to a `context's` `:coeffects`.\n\n  `coeffects` are the input resources required by an event handler\n   to perform its job. The two most obvious ones are `db` and `event`.\n   But sometimes a handler might need other resources.\n\n   Perhaps a handler needs a random number or a GUID or the current datetime.\n   Perhaps it needs access to the connection to a DataScript database.\n\n   If the handler directly access these resources, it stops being as\n   pure. It immedaitely becomes harder to test, etc.\n\n   So the necessary resources are \"injected\" into the `coeffect` (map)\n   given the handler.\n\n   Given an `id`, and an optional value, lookup the registered coeffect\n   handler (previously registered via `reg-cofx`) and it with two arguments:\n   the current value of `:coeffects` and, optionally, the value. The registered handler\n   is expected to return a modified coeffect.\n   "}, inject-db {:name re-frame.cofx/inject-db, :file "resources/public/js/compiled/out/re_frame/cofx.cljc", :line 66, :column 1, :end-line 66, :end-column 15, :meta {:file "/home/average-user/Dropbox/Clojure/gozar/resources/public/js/compiled/out/re_frame/cofx.cljc", :line 66, :column 6, :end-line 66, :end-column 15}, :tag any}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:db :id :coeffects :cofx :before}, :order [:cofx :id :coeffects :before :db]}, :doc nil}