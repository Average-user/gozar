{:rename-macros {}, :renames {}, :externs {Error {}}, :use-macros {console re-frame.loggers, empty-queue re-frame.interop, debug-enabled? re-frame.interop}, :excludes #{}, :name re-frame.events, :imports nil, :requires {re-frame.db re-frame.db, re-frame.utils re-frame.utils, re-frame.interop re-frame.interop, re-frame.registrar re-frame.registrar, re-frame.loggers re-frame.loggers, interceptor re-frame.interceptor, re-frame.interceptor re-frame.interceptor, trace re-frame.trace, re-frame.trace re-frame.trace}, :uses {console re-frame.loggers, app-db re-frame.db, get-handler re-frame.registrar, first-in-vector re-frame.utils, empty-queue re-frame.interop, debug-enabled? re-frame.interop, register-handler re-frame.registrar}, :defs {kind {:name re-frame.events/kind, :file "resources/public/js/compiled/out/re_frame/events.cljc", :line 11, :column 1, :end-line 11, :end-column 10, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/re_frame/events.cljc", :line 11, :column 6, :end-line 11, :end-column 10}, :tag cljs.core/Keyword}, flatten-and-remove-nils {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/re_frame/events.cljc", :line 14, :column 8, :end-line 14, :end-column 31, :private true, :arglists (quote ([id interceptors])), :doc "`interceptors` might have nested collections, and contain nil elements.\n  return a flat collection, with all nils removed.\n  This function is 9/10 about giving good error messages"}, :private true, :name re-frame.events/flatten-and-remove-nils, :variadic false, :file "resources/public/js/compiled/out/re_frame/events.cljc", :end-column 31, :method-params ([id interceptors]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 2, :fn-var true, :arglists (quote ([id interceptors])), :doc "`interceptors` might have nested collections, and contain nil elements.\n  return a flat collection, with all nils removed.\n  This function is 9/10 about giving good error messages"}, register {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/re_frame/events.cljc", :line 35, :column 7, :end-line 35, :end-column 15, :arglists (quote ([id interceptors])), :doc "Associate the given event `id` with the given collection of `interceptors`.\n\n   `interceptors` may contain nested collections and there may be nils\n   at any level,so process this structure into a simple, nil-less vector\n   before registration.\n\n   An `event handler` will likely be at the end of the chain (wrapped in an interceptor)."}, :name re-frame.events/register, :variadic false, :file "resources/public/js/compiled/out/re_frame/events.cljc", :end-column 15, :method-params ([id interceptors]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 2, :fn-var true, :arglists (quote ([id interceptors])), :doc "Associate the given event `id` with the given collection of `interceptors`.\n\n   `interceptors` may contain nested collections and there may be nils\n   at any level,so process this structure into a simple, nil-less vector\n   before registration.\n\n   An `event handler` will likely be at the end of the chain (wrapped in an interceptor)."}, *handling* {:name re-frame.events/*handling*, :file "resources/public/js/compiled/out/re_frame/events.cljc", :line 50, :column 1, :end-line 50, :end-column 26, :dynamic true, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/re_frame/events.cljc", :line 50, :column 16, :end-line 50, :end-column 26, :dynamic true}, :tag clj-nil}, handle {:protocol-inline nil, :meta {:file "/home/lucas/Dropbox/Clojure/gozar/resources/public/js/compiled/out/re_frame/events.cljc", :line 52, :column 7, :end-line 52, :end-column 13, :arglists (quote ([event-v])), :doc "Given an event vector, look up the associated intercepter chain, and execute it."}, :name re-frame.events/handle, :variadic false, :file "resources/public/js/compiled/out/re_frame/events.cljc", :end-column 13, :method-params ([event-v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 1, :fn-var true, :arglists (quote ([event-v])), :doc "Given an event vector, look up the associated intercepter chain, and execute it."}}, :require-macros {trace re-frame.trace, re-frame.trace re-frame.trace}, :cljs.analyzer/constants {:seen #{:tags :else :operation :start :duration :event :error :end :op-type}, :order [:event :error :operation :op-type :tags :start :else :duration :end]}, :doc nil}