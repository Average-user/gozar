{:rename-macros {}, :renames {}, :externs {Error {}}, :use-macros {console re-frame.loggers, set-timeout! re-frame.interop}, :excludes #{}, :name re-frame.fx, :imports nil, :requires {router re-frame.router, re-frame.router re-frame.router, re-frame.db re-frame.db, re-frame.interceptor re-frame.interceptor, re-frame.interop re-frame.interop, events re-frame.events, re-frame.events re-frame.events, re-frame.registrar re-frame.registrar, re-frame.loggers re-frame.loggers}, :uses {console re-frame.loggers, app-db re-frame.db, ->interceptor re-frame.interceptor, set-timeout! re-frame.interop, get-handler re-frame.registrar, clear-handlers re-frame.registrar, register-handler re-frame.registrar}, :defs {kind {:name re-frame.fx/kind, :file "resources/public/js/compiled/out/re_frame/fx.cljc", :line 14, :column 1, :end-line 14, :end-column 10, :meta {:file "/home/average-user/Dropbox/Clojure/gozar/resources/public/js/compiled/out/re_frame/fx.cljc", :line 14, :column 6, :end-line 14, :end-column 10}, :tag cljs.core/Keyword}, register {:name re-frame.fx/register, :file "resources/public/js/compiled/out/re_frame/fx.cljc", :line 16, :column 1, :end-line 16, :end-column 14, :meta {:file "/home/average-user/Dropbox/Clojure/gozar/resources/public/js/compiled/out/re_frame/fx.cljc", :line 16, :column 6, :end-line 16, :end-column 14}, :tag any}, do-fx {:name re-frame.fx/do-fx, :file "resources/public/js/compiled/out/re_frame/fx.cljc", :line 20, :column 1, :end-line 20, :end-column 11, :meta {:file "/home/average-user/Dropbox/Clojure/gozar/resources/public/js/compiled/out/re_frame/fx.cljc", :line 20, :column 6, :end-line 20, :end-column 11}, :doc "An interceptor which actions a `context's` (side) `:effects`.\n\n  For each key in the `:effects` map, call the `effects handler` previously\n  registered using `reg-fx`.\n\n  So, if `:effects` was:\n      {:dispatch  [:hello 42]\n       :db        {...}\n       :undo      \"set flag\"}\n  call the registered effects handlers for each of the map's keys:\n  `:dispatch`, `:undo` and `:db`.", :tag any}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:db :do-fx :dispatch-n :deregister-event-handler :dispatch :after :id :effects :error :ms :fx :dispatch-later}, :order [:fx :id :do-fx :after :effects :dispatch-later :ms :dispatch :error :dispatch-n :deregister-event-handler :db]}, :doc nil}