{:rename-macros {}, :renames {}, :use-macros {console re-frame.loggers, after-render re-frame.interop, next-tick re-frame.interop, empty-queue re-frame.interop}, :excludes #{}, :name re-frame.router, :imports nil, :requires {re-frame.events re-frame.events, re-frame.interop re-frame.interop, re-frame.loggers re-frame.loggers, trace re-frame.trace, re-frame.trace re-frame.trace}, :uses {console re-frame.loggers, after-render re-frame.interop, next-tick re-frame.interop, empty-queue re-frame.interop, handle re-frame.events}, :defs {EventQueue {:num-fields 3, :protocols #{re-frame.router/IEventQueue}, :name re-frame.router/EventQueue, :file "resources/public/js/compiled/out/re_frame/router.cljc", :end-column 20, :type true, :column 10, :line 93, :record false, :end-line 93, :skip-protocol-flag nil}, -run-queue {:protocol-inline nil, :meta {:file "/home/average-user/Dropbox/Clojure/gozar/resources/public/js/compiled/out/re_frame/router.cljc", :line 85, :column 4, :end-line 85, :end-column 14, :protocol re-frame.router/IEventQueue, :doc nil, :arglists (quote ([this]))}, :protocol re-frame.router/IEventQueue, :name re-frame.router/-run-queue, :variadic false, :file "resources/public/js/compiled/out/re_frame/router.cljc", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 71, :end-line 85, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc nil}, remove-post-event-callback {:protocol-inline nil, :meta {:file "/home/average-user/Dropbox/Clojure/gozar/resources/public/js/compiled/out/re_frame/router.cljc", :line 76, :column 4, :end-line 76, :end-column 30, :protocol re-frame.router/IEventQueue, :doc nil, :arglists (quote ([this f]))}, :protocol re-frame.router/IEventQueue, :name re-frame.router/remove-post-event-callback, :variadic false, :file "resources/public/js/compiled/out/re_frame/router.cljc", :end-column 30, :method-params ([this f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 71, :end-line 76, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this f])), :doc nil}, dispatch-sync {:protocol-inline nil, :meta {:file "/home/average-user/Dropbox/Clojure/gozar/resources/public/js/compiled/out/re_frame/router.cljc", :line 245, :column 7, :end-line 245, :end-column 20, :arglists (quote ([event-v])), :doc "Sychronously (immediately!) process the given event using the registered handler.\n\n  Generally, you shouldn't use this - you should use `dispatch` instead.  It\n  is an error to use `dispatch-sync` within an event handler.\n\n  Usage:\n     (dispatch-sync [:delete-item 42])"}, :name re-frame.router/dispatch-sync, :variadic false, :file "resources/public/js/compiled/out/re_frame/router.cljc", :end-column 20, :method-params ([event-v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 245, :end-line 245, :max-fixed-arity 1, :fn-var true, :arglists (quote ([event-v])), :doc "Sychronously (immediately!) process the given event using the registered handler.\n\n  Generally, you shouldn't use this - you should use `dispatch` instead.  It\n  is an error to use `dispatch-sync` within an event handler.\n\n  Usage:\n     (dispatch-sync [:delete-item 42])"}, -add-event {:protocol-inline nil, :meta {:file "/home/average-user/Dropbox/Clojure/gozar/resources/public/js/compiled/out/re_frame/router.cljc", :line 82, :column 4, :end-line 82, :end-column 14, :protocol re-frame.router/IEventQueue, :doc nil, :arglists (quote ([this event]))}, :protocol re-frame.router/IEventQueue, :name re-frame.router/-add-event, :variadic false, :file "resources/public/js/compiled/out/re_frame/router.cljc", :end-column 14, :method-params ([this event]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 71, :end-line 82, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this event])), :doc nil}, -resume {:protocol-inline nil, :meta {:file "/home/average-user/Dropbox/Clojure/gozar/resources/public/js/compiled/out/re_frame/router.cljc", :line 88, :column 4, :end-line 88, :end-column 11, :protocol re-frame.router/IEventQueue, :doc nil, :arglists (quote ([this]))}, :protocol re-frame.router/IEventQueue, :name re-frame.router/-resume, :variadic false, :file "resources/public/js/compiled/out/re_frame/router.cljc", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 71, :end-line 88, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc nil}, push {:protocol-inline nil, :meta {:file "/home/average-user/Dropbox/Clojure/gozar/resources/public/js/compiled/out/re_frame/router.cljc", :line 74, :column 4, :end-line 74, :end-column 8, :protocol re-frame.router/IEventQueue, :doc nil, :arglists (quote ([this event]))}, :protocol re-frame.router/IEventQueue, :name re-frame.router/push, :variadic false, :file "resources/public/js/compiled/out/re_frame/router.cljc", :end-column 8, :method-params ([this event]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 71, :end-line 74, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this event])), :doc nil}, -run-next-tick {:protocol-inline nil, :meta {:file "/home/average-user/Dropbox/Clojure/gozar/resources/public/js/compiled/out/re_frame/router.cljc", :line 84, :column 4, :end-line 84, :end-column 18, :protocol re-frame.router/IEventQueue, :doc nil, :arglists (quote ([this]))}, :protocol re-frame.router/IEventQueue, :name re-frame.router/-run-next-tick, :variadic false, :file "resources/public/js/compiled/out/re_frame/router.cljc", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 71, :end-line 84, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc nil}, later-fns {:name re-frame.router/later-fns, :file "resources/public/js/compiled/out/re_frame/router.cljc", :line 65, :column 1, :end-line 65, :end-column 15, :meta {:file "/home/average-user/Dropbox/Clojure/gozar/resources/public/js/compiled/out/re_frame/router.cljc", :line 65, :column 6, :end-line 65, :end-column 15}, :tag cljs.core/IMap}, -fsm-trigger {:protocol-inline nil, :meta {:file "/home/average-user/Dropbox/Clojure/gozar/resources/public/js/compiled/out/re_frame/router.cljc", :line 79, :column 4, :end-line 79, :end-column 16, :protocol re-frame.router/IEventQueue, :doc nil, :arglists (quote ([this trigger arg]))}, :protocol re-frame.router/IEventQueue, :name re-frame.router/-fsm-trigger, :variadic false, :file "resources/public/js/compiled/out/re_frame/router.cljc", :end-column 16, :method-params ([this trigger arg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 71, :end-line 79, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this trigger arg])), :doc nil}, -pause {:protocol-inline nil, :meta {:file "/home/average-user/Dropbox/Clojure/gozar/resources/public/js/compiled/out/re_frame/router.cljc", :line 87, :column 4, :end-line 87, :end-column 10, :protocol re-frame.router/IEventQueue, :doc nil, :arglists (quote ([this later-fn]))}, :protocol re-frame.router/IEventQueue, :name re-frame.router/-pause, :variadic false, :file "resources/public/js/compiled/out/re_frame/router.cljc", :end-column 10, :method-params ([this later-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 71, :end-line 87, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this later-fn])), :doc nil}, dispatch {:protocol-inline nil, :meta {:file "/home/average-user/Dropbox/Clojure/gozar/resources/public/js/compiled/out/re_frame/router.cljc", :line 229, :column 7, :end-line 229, :end-column 15, :arglists (quote ([event])), :doc "Queue the given event for processing by the registered event handler.\n\n  Just to be clear: the event handler is not run immediately - it is not run\n  synchronously. It will likely be run 'very soon', although it may be\n  added to the end of a FIFO queue which already contain events.\n\n  Usage:\n     (dispatch [:delete-item 42])"}, :name re-frame.router/dispatch, :variadic false, :file "resources/public/js/compiled/out/re_frame/router.cljc", :end-column 15, :method-params ([event]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 229, :end-line 229, :max-fixed-arity 1, :fn-var true, :arglists (quote ([event])), :doc "Queue the given event for processing by the registered event handler.\n\n  Just to be clear: the event handler is not run immediately - it is not run\n  synchronously. It will likely be run 'very soon', although it may be\n  added to the end of a FIFO queue which already contain events.\n\n  Usage:\n     (dispatch [:delete-item 42])"}, add-post-event-callback {:protocol-inline nil, :meta {:file "/home/average-user/Dropbox/Clojure/gozar/resources/public/js/compiled/out/re_frame/router.cljc", :line 75, :column 4, :end-line 75, :end-column 27, :protocol re-frame.router/IEventQueue, :doc nil, :arglists (quote ([this id callack]))}, :protocol re-frame.router/IEventQueue, :name re-frame.router/add-post-event-callback, :variadic false, :file "resources/public/js/compiled/out/re_frame/router.cljc", :end-column 27, :method-params ([this id callack]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 71, :end-line 75, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this id callack])), :doc nil}, -process-1st-event-in-queue {:protocol-inline nil, :meta {:file "/home/average-user/Dropbox/Clojure/gozar/resources/public/js/compiled/out/re_frame/router.cljc", :line 83, :column 4, :end-line 83, :end-column 31, :protocol re-frame.router/IEventQueue, :doc nil, :arglists (quote ([this]))}, :protocol re-frame.router/IEventQueue, :name re-frame.router/-process-1st-event-in-queue, :variadic false, :file "resources/public/js/compiled/out/re_frame/router.cljc", :end-column 31, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 71, :end-line 83, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc nil}, -call-post-event-callbacks {:protocol-inline nil, :meta {:file "/home/average-user/Dropbox/Clojure/gozar/resources/public/js/compiled/out/re_frame/router.cljc", :line 89, :column 4, :end-line 89, :end-column 30, :protocol re-frame.router/IEventQueue, :doc nil, :arglists (quote ([this event]))}, :protocol re-frame.router/IEventQueue, :name re-frame.router/-call-post-event-callbacks, :variadic false, :file "resources/public/js/compiled/out/re_frame/router.cljc", :end-column 30, :method-params ([this event]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 71, :end-line 89, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this event])), :doc nil}, ->EventQueue {:protocol-inline nil, :meta {:file "/home/average-user/Dropbox/Clojure/gozar/resources/public/js/compiled/out/re_frame/router.cljc", :line 93, :column 10, :end-line 93, :end-column 20, :protocols #{re-frame.router/IEventQueue}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([fsm-state queue post-event-callback-fns]))}, :protocols #{re-frame.router/IEventQueue}, :name re-frame.router/->EventQueue, :variadic false, :file "resources/public/js/compiled/out/re_frame/router.cljc", :end-column 20, :method-params ([fsm-state queue post-event-callback-fns]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 93, :end-line 93, :max-fixed-arity 3, :fn-var true, :arglists (quote ([fsm-state queue post-event-callback-fns])), :skip-protocol-flag nil}, event-queue {:name re-frame.router/event-queue, :file "resources/public/js/compiled/out/re_frame/router.cljc", :line 222, :column 1, :end-line 222, :end-column 17, :meta {:file "/home/average-user/Dropbox/Clojure/gozar/resources/public/js/compiled/out/re_frame/router.cljc", :line 222, :column 6, :end-line 222, :end-column 17}, :tag any}, IEventQueue {:meta {:file "/home/average-user/Dropbox/Clojure/gozar/resources/public/js/compiled/out/re_frame/router.cljc", :line 71, :column 14, :end-line 71, :end-column 25, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-run-queue [[this]], remove-post-event-callback [[this f]], -add-event [[this event]], -resume [[this]], push [[this event]], -run-next-tick [[this]], -fsm-trigger [[this trigger arg]], -pause [[this later-fn]], add-post-event-callback [[this id callack]], -process-1st-event-in-queue [[this]], -call-post-event-callbacks [[this event]], -exception [[this ex]]}}}, :protocol-symbol true, :name re-frame.router/IEventQueue, :file "resources/public/js/compiled/out/re_frame/router.cljc", :end-column 25, :column 1, :line 71, :protocol-info {:methods {-run-queue [[this]], remove-post-event-callback [[this f]], -add-event [[this event]], -resume [[this]], push [[this event]], -run-next-tick [[this]], -fsm-trigger [[this trigger arg]], -pause [[this later-fn]], add-post-event-callback [[this id callack]], -process-1st-event-in-queue [[this]], -call-post-event-callbacks [[this event]], -exception [[this ex]]}}, :info nil, :end-line 71, :tag any, :impls #{re-frame.router/EventQueue}, :doc nil, :jsdoc ("@interface")}, -exception {:protocol-inline nil, :meta {:file "/home/average-user/Dropbox/Clojure/gozar/resources/public/js/compiled/out/re_frame/router.cljc", :line 86, :column 4, :end-line 86, :end-column 14, :protocol re-frame.router/IEventQueue, :doc nil, :arglists (quote ([this ex]))}, :protocol re-frame.router/IEventQueue, :name re-frame.router/-exception, :variadic false, :file "resources/public/js/compiled/out/re_frame/router.cljc", :end-column 14, :method-params ([this ex]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 71, :end-line 86, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this ex])), :doc nil}}, :require-macros {trace re-frame.trace, re-frame.trace re-frame.trace}, :cljs.analyzer/constants {:seen #{:add-event :yield :tags post-event-callback-fns :paused :idle :current-state :new-state :fsm-state :else :warn :re-frame.router/fsm-trigger :operation :start fsm-state :duration queue :running :flush-dom :run-queue :scheduled :pause :error :exception :mutable :end :trigger :resume :op-type :finish-run}, :order [:flush-dom :yield :finish-run :pause :warn :add-event :run-queue :op-type :re-frame.router/fsm-trigger :start :error :else :duration :end :idle :scheduled :running :paused :exception :resume :fsm-state :trigger :tags :operation :current-state :new-state fsm-state :mutable queue post-event-callback-fns]}, :doc nil}